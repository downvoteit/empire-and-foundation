// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/commandplanet"
)

// CommandPlanet is the model entity for the CommandPlanet schema.
type CommandPlanet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Typ holds the value of the "typ" field.
	Typ commandplanet.Typ `json:"typ,omitempty"`
	// Group holds the value of the "group" field.
	Group commandplanet.Group `json:"group,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
}

// FromRows scans the sql response data into CommandPlanet.
func (cp *CommandPlanet) FromRows(rows *sql.Rows) error {
	var scancp struct {
		ID      int
		Typ     sql.NullString
		Group   sql.NullString
		EndTime sql.NullTime
	}
	// the order here should be the same as in the `commandplanet.Columns`.
	if err := rows.Scan(
		&scancp.ID,
		&scancp.Typ,
		&scancp.Group,
		&scancp.EndTime,
	); err != nil {
		return err
	}
	cp.ID = scancp.ID
	cp.Typ = commandplanet.Typ(scancp.Typ.String)
	cp.Group = commandplanet.Group(scancp.Group.String)
	cp.EndTime = scancp.EndTime.Time
	return nil
}

// QueryPlanet queries the planet edge of the CommandPlanet.
func (cp *CommandPlanet) QueryPlanet() *PlanetQuery {
	return (&CommandPlanetClient{cp.config}).QueryPlanet(cp)
}

// Update returns a builder for updating this CommandPlanet.
// Note that, you need to call CommandPlanet.Unwrap() before calling this method, if this CommandPlanet
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CommandPlanet) Update() *CommandPlanetUpdateOne {
	return (&CommandPlanetClient{cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cp *CommandPlanet) Unwrap() *CommandPlanet {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommandPlanet is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CommandPlanet) String() string {
	var builder strings.Builder
	builder.WriteString("CommandPlanet(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", typ=")
	builder.WriteString(fmt.Sprintf("%v", cp.Typ))
	builder.WriteString(", group=")
	builder.WriteString(fmt.Sprintf("%v", cp.Group))
	builder.WriteString(", end_time=")
	builder.WriteString(cp.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommandPlanets is a parsable slice of CommandPlanet.
type CommandPlanets []*CommandPlanet

// FromRows scans the sql response data into CommandPlanets.
func (cp *CommandPlanets) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scancp := &CommandPlanet{}
		if err := scancp.FromRows(rows); err != nil {
			return err
		}
		*cp = append(*cp, scancp)
	}
	return nil
}

func (cp CommandPlanets) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
