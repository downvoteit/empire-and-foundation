// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// Planet is the model entity for the Planet schema.
type Planet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Metal holds the value of the "metal" field.
	Metal int64 `json:"metal,omitempty"`
	// MetalLastUpdate holds the value of the "metal_last_update" field.
	MetalLastUpdate time.Time `json:"metal_last_update,omitempty"`
	// MetalRate holds the value of the "metal_rate" field.
	MetalRate int `json:"metal_rate,omitempty"`
	// MetalProdLevel holds the value of the "metal_prod_level" field.
	MetalProdLevel int `json:"metal_prod_level,omitempty"`
	// MetalStorageLevel holds the value of the "metal_storage_level" field.
	MetalStorageLevel int `json:"metal_storage_level,omitempty"`
	// Hydrogen holds the value of the "hydrogen" field.
	Hydrogen int64 `json:"hydrogen,omitempty"`
	// HydrogenLastUpdate holds the value of the "hydrogen_last_update" field.
	HydrogenLastUpdate time.Time `json:"hydrogen_last_update,omitempty"`
	// HydrogenRate holds the value of the "hydrogen_rate" field.
	HydrogenRate int `json:"hydrogen_rate,omitempty"`
	// HydrogenProdLevel holds the value of the "hydrogen_prod_level" field.
	HydrogenProdLevel int `json:"hydrogen_prod_level,omitempty"`
	// HydrogenStorageLevel holds the value of the "hydrogen_storage_level" field.
	HydrogenStorageLevel int `json:"hydrogen_storage_level,omitempty"`
	// Silica holds the value of the "silica" field.
	Silica int64 `json:"silica,omitempty"`
	// SilicaLastUpdate holds the value of the "silica_last_update" field.
	SilicaLastUpdate time.Time `json:"silica_last_update,omitempty"`
	// SilicaRate holds the value of the "silica_rate" field.
	SilicaRate int `json:"silica_rate,omitempty"`
	// SilicaProdLevel holds the value of the "silica_prod_level" field.
	SilicaProdLevel int `json:"silica_prod_level,omitempty"`
	// SilicaStorageLevel holds the value of the "silica_storage_level" field.
	SilicaStorageLevel int `json:"silica_storage_level,omitempty"`
	// Population holds the value of the "population" field.
	Population int64 `json:"population,omitempty"`
	// PopulationLastUpdate holds the value of the "population_last_update" field.
	PopulationLastUpdate time.Time `json:"population_last_update,omitempty"`
	// PopulationRate holds the value of the "population_rate" field.
	PopulationRate int `json:"population_rate,omitempty"`
	// PopulationProdLevel holds the value of the "population_prod_level" field.
	PopulationProdLevel int `json:"population_prod_level,omitempty"`
	// PopulationStorageLevel holds the value of the "population_storage_level" field.
	PopulationStorageLevel int `json:"population_storage_level,omitempty"`
	// EnergyCons holds the value of the "energy_cons" field.
	EnergyCons int64 `json:"energy_cons,omitempty"`
	// EnergyProd holds the value of the "energy_prod" field.
	EnergyProd int64 `json:"energy_prod,omitempty"`
	// SolarProdLevel holds the value of the "solar_prod_level" field.
	SolarProdLevel int `json:"solar_prod_level,omitempty"`
	// RegionCode holds the value of the "region_code" field.
	RegionCode int `json:"region_code,omitempty"`
	// SystemCode holds the value of the "system_code" field.
	SystemCode int `json:"system_code,omitempty"`
	// OrbitCode holds the value of the "orbit_code" field.
	OrbitCode int `json:"orbit_code,omitempty"`
	// SuborbitCode holds the value of the "suborbit_code" field.
	SuborbitCode int `json:"suborbit_code,omitempty"`
	// PositionCode holds the value of the "position_code" field.
	PositionCode int `json:"position_code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PlanetType holds the value of the "planet_type" field.
	PlanetType planet.PlanetType `json:"planet_type,omitempty"`
	// PlanetSkin holds the value of the "planet_skin" field.
	PlanetSkin string `json:"planet_skin,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanetQuery when eager-loading is set.
	Edges    PlanetEdges `json:"edges"`
	owner_id *int
}

// PlanetEdges holds the relations/edges for other nodes in the graph.
type PlanetEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// Timers holds the value of the timers edge.
	Timers []*Timer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanetEdges) OwnerErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TimersErr returns the Timers value or an error if the edge
// was not loaded in eager-loading.
func (e PlanetEdges) TimersErr() ([]*Timer, error) {
	if e.loadedTypes[1] {
		return e.Timers, nil
	}
	return nil, &NotLoadedError{edge: "timers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Planet) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // metal
		&sql.NullTime{},   // metal_last_update
		&sql.NullInt64{},  // metal_rate
		&sql.NullInt64{},  // metal_prod_level
		&sql.NullInt64{},  // metal_storage_level
		&sql.NullInt64{},  // hydrogen
		&sql.NullTime{},   // hydrogen_last_update
		&sql.NullInt64{},  // hydrogen_rate
		&sql.NullInt64{},  // hydrogen_prod_level
		&sql.NullInt64{},  // hydrogen_storage_level
		&sql.NullInt64{},  // silica
		&sql.NullTime{},   // silica_last_update
		&sql.NullInt64{},  // silica_rate
		&sql.NullInt64{},  // silica_prod_level
		&sql.NullInt64{},  // silica_storage_level
		&sql.NullInt64{},  // population
		&sql.NullTime{},   // population_last_update
		&sql.NullInt64{},  // population_rate
		&sql.NullInt64{},  // population_prod_level
		&sql.NullInt64{},  // population_storage_level
		&sql.NullInt64{},  // energy_cons
		&sql.NullInt64{},  // energy_prod
		&sql.NullInt64{},  // solar_prod_level
		&sql.NullInt64{},  // region_code
		&sql.NullInt64{},  // system_code
		&sql.NullInt64{},  // orbit_code
		&sql.NullInt64{},  // suborbit_code
		&sql.NullInt64{},  // position_code
		&sql.NullString{}, // name
		&sql.NullString{}, // planet_type
		&sql.NullString{}, // planet_skin
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Planet) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // owner_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Planet fields.
func (pl *Planet) assignValues(values ...interface{}) error {
	if m, n := len(values), len(planet.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pl.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		pl.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		pl.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field metal", values[2])
	} else if value.Valid {
		pl.Metal = value.Int64
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field metal_last_update", values[3])
	} else if value.Valid {
		pl.MetalLastUpdate = value.Time
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field metal_rate", values[4])
	} else if value.Valid {
		pl.MetalRate = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field metal_prod_level", values[5])
	} else if value.Valid {
		pl.MetalProdLevel = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field metal_storage_level", values[6])
	} else if value.Valid {
		pl.MetalStorageLevel = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hydrogen", values[7])
	} else if value.Valid {
		pl.Hydrogen = value.Int64
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field hydrogen_last_update", values[8])
	} else if value.Valid {
		pl.HydrogenLastUpdate = value.Time
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hydrogen_rate", values[9])
	} else if value.Valid {
		pl.HydrogenRate = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hydrogen_prod_level", values[10])
	} else if value.Valid {
		pl.HydrogenProdLevel = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hydrogen_storage_level", values[11])
	} else if value.Valid {
		pl.HydrogenStorageLevel = int(value.Int64)
	}
	if value, ok := values[12].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field silica", values[12])
	} else if value.Valid {
		pl.Silica = value.Int64
	}
	if value, ok := values[13].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field silica_last_update", values[13])
	} else if value.Valid {
		pl.SilicaLastUpdate = value.Time
	}
	if value, ok := values[14].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field silica_rate", values[14])
	} else if value.Valid {
		pl.SilicaRate = int(value.Int64)
	}
	if value, ok := values[15].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field silica_prod_level", values[15])
	} else if value.Valid {
		pl.SilicaProdLevel = int(value.Int64)
	}
	if value, ok := values[16].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field silica_storage_level", values[16])
	} else if value.Valid {
		pl.SilicaStorageLevel = int(value.Int64)
	}
	if value, ok := values[17].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field population", values[17])
	} else if value.Valid {
		pl.Population = value.Int64
	}
	if value, ok := values[18].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field population_last_update", values[18])
	} else if value.Valid {
		pl.PopulationLastUpdate = value.Time
	}
	if value, ok := values[19].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field population_rate", values[19])
	} else if value.Valid {
		pl.PopulationRate = int(value.Int64)
	}
	if value, ok := values[20].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field population_prod_level", values[20])
	} else if value.Valid {
		pl.PopulationProdLevel = int(value.Int64)
	}
	if value, ok := values[21].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field population_storage_level", values[21])
	} else if value.Valid {
		pl.PopulationStorageLevel = int(value.Int64)
	}
	if value, ok := values[22].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field energy_cons", values[22])
	} else if value.Valid {
		pl.EnergyCons = value.Int64
	}
	if value, ok := values[23].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field energy_prod", values[23])
	} else if value.Valid {
		pl.EnergyProd = value.Int64
	}
	if value, ok := values[24].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field solar_prod_level", values[24])
	} else if value.Valid {
		pl.SolarProdLevel = int(value.Int64)
	}
	if value, ok := values[25].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field region_code", values[25])
	} else if value.Valid {
		pl.RegionCode = int(value.Int64)
	}
	if value, ok := values[26].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field system_code", values[26])
	} else if value.Valid {
		pl.SystemCode = int(value.Int64)
	}
	if value, ok := values[27].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field orbit_code", values[27])
	} else if value.Valid {
		pl.OrbitCode = int(value.Int64)
	}
	if value, ok := values[28].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field suborbit_code", values[28])
	} else if value.Valid {
		pl.SuborbitCode = int(value.Int64)
	}
	if value, ok := values[29].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field position_code", values[29])
	} else if value.Valid {
		pl.PositionCode = int(value.Int64)
	}
	if value, ok := values[30].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[30])
	} else if value.Valid {
		pl.Name = value.String
	}
	if value, ok := values[31].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field planet_type", values[31])
	} else if value.Valid {
		pl.PlanetType = planet.PlanetType(value.String)
	}
	if value, ok := values[32].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field planet_skin", values[32])
	} else if value.Valid {
		pl.PlanetSkin = value.String
	}
	values = values[33:]
	if len(values) == len(planet.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field owner_id", value)
		} else if value.Valid {
			pl.owner_id = new(int)
			*pl.owner_id = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Planet.
func (pl *Planet) QueryOwner() *UserQuery {
	return (&PlanetClient{pl.config}).QueryOwner(pl)
}

// QueryTimers queries the timers edge of the Planet.
func (pl *Planet) QueryTimers() *TimerQuery {
	return (&PlanetClient{pl.config}).QueryTimers(pl)
}

// Update returns a builder for updating this Planet.
// Note that, you need to call Planet.Unwrap() before calling this method, if this Planet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Planet) Update() *PlanetUpdateOne {
	return (&PlanetClient{pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pl *Planet) Unwrap() *Planet {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Planet is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Planet) String() string {
	var builder strings.Builder
	builder.WriteString("Planet(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", metal=")
	builder.WriteString(fmt.Sprintf("%v", pl.Metal))
	builder.WriteString(", metal_last_update=")
	builder.WriteString(pl.MetalLastUpdate.Format(time.ANSIC))
	builder.WriteString(", metal_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalRate))
	builder.WriteString(", metal_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalProdLevel))
	builder.WriteString(", metal_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalStorageLevel))
	builder.WriteString(", hydrogen=")
	builder.WriteString(fmt.Sprintf("%v", pl.Hydrogen))
	builder.WriteString(", hydrogen_last_update=")
	builder.WriteString(pl.HydrogenLastUpdate.Format(time.ANSIC))
	builder.WriteString(", hydrogen_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenRate))
	builder.WriteString(", hydrogen_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenProdLevel))
	builder.WriteString(", hydrogen_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenStorageLevel))
	builder.WriteString(", silica=")
	builder.WriteString(fmt.Sprintf("%v", pl.Silica))
	builder.WriteString(", silica_last_update=")
	builder.WriteString(pl.SilicaLastUpdate.Format(time.ANSIC))
	builder.WriteString(", silica_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaRate))
	builder.WriteString(", silica_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaProdLevel))
	builder.WriteString(", silica_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaStorageLevel))
	builder.WriteString(", population=")
	builder.WriteString(fmt.Sprintf("%v", pl.Population))
	builder.WriteString(", population_last_update=")
	builder.WriteString(pl.PopulationLastUpdate.Format(time.ANSIC))
	builder.WriteString(", population_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationRate))
	builder.WriteString(", population_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationProdLevel))
	builder.WriteString(", population_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationStorageLevel))
	builder.WriteString(", energy_cons=")
	builder.WriteString(fmt.Sprintf("%v", pl.EnergyCons))
	builder.WriteString(", energy_prod=")
	builder.WriteString(fmt.Sprintf("%v", pl.EnergyProd))
	builder.WriteString(", solar_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SolarProdLevel))
	builder.WriteString(", region_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.RegionCode))
	builder.WriteString(", system_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.SystemCode))
	builder.WriteString(", orbit_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.OrbitCode))
	builder.WriteString(", suborbit_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.SuborbitCode))
	builder.WriteString(", position_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.PositionCode))
	builder.WriteString(", name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", planet_type=")
	builder.WriteString(fmt.Sprintf("%v", pl.PlanetType))
	builder.WriteString(", planet_skin=")
	builder.WriteString(pl.PlanetSkin)
	builder.WriteByte(')')
	return builder.String()
}

// Planets is a parsable slice of Planet.
type Planets []*Planet

func (pl Planets) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
