// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Planet is the model entity for the Planet schema.
type Planet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Metal holds the value of the "metal" field.
	Metal int64 `json:"metal,omitempty"`
	// MetalLastUpdate holds the value of the "metal_last_update" field.
	MetalLastUpdate time.Time `json:"metal_last_update,omitempty"`
	// MetalRate holds the value of the "metal_rate" field.
	MetalRate int `json:"metal_rate,omitempty"`
	// MetalProdLevel holds the value of the "metal_prod_level" field.
	MetalProdLevel int `json:"metal_prod_level,omitempty"`
	// MetalStorageLevel holds the value of the "metal_storage_level" field.
	MetalStorageLevel int `json:"metal_storage_level,omitempty"`
	// Hydrogen holds the value of the "hydrogen" field.
	Hydrogen int64 `json:"hydrogen,omitempty"`
	// HydrogenLastUpdate holds the value of the "hydrogen_last_update" field.
	HydrogenLastUpdate time.Time `json:"hydrogen_last_update,omitempty"`
	// HydrogenRate holds the value of the "hydrogen_rate" field.
	HydrogenRate int `json:"hydrogen_rate,omitempty"`
	// HydrogenProdLevel holds the value of the "hydrogen_prod_level" field.
	HydrogenProdLevel int `json:"hydrogen_prod_level,omitempty"`
	// HydrogenStorageLevel holds the value of the "hydrogen_storage_level" field.
	HydrogenStorageLevel int `json:"hydrogen_storage_level,omitempty"`
	// Silica holds the value of the "silica" field.
	Silica int64 `json:"silica,omitempty"`
	// SilicaLastUpdate holds the value of the "silica_last_update" field.
	SilicaLastUpdate time.Time `json:"silica_last_update,omitempty"`
	// SilicaRate holds the value of the "silica_rate" field.
	SilicaRate int `json:"silica_rate,omitempty"`
	// SilicaProdLevel holds the value of the "silica_prod_level" field.
	SilicaProdLevel int `json:"silica_prod_level,omitempty"`
	// SilicaStorageLevel holds the value of the "silica_storage_level" field.
	SilicaStorageLevel int `json:"silica_storage_level,omitempty"`
	// Population holds the value of the "population" field.
	Population int64 `json:"population,omitempty"`
	// PopulationLastUpdate holds the value of the "population_last_update" field.
	PopulationLastUpdate time.Time `json:"population_last_update,omitempty"`
	// PopulationRate holds the value of the "population_rate" field.
	PopulationRate int `json:"population_rate,omitempty"`
	// PopulationProdLevel holds the value of the "population_prod_level" field.
	PopulationProdLevel int `json:"population_prod_level,omitempty"`
	// PopulationStorageLevel holds the value of the "population_storage_level" field.
	PopulationStorageLevel int `json:"population_storage_level,omitempty"`
	// EnergyCons holds the value of the "energy_cons" field.
	EnergyCons int64 `json:"energy_cons,omitempty"`
	// EnergyProd holds the value of the "energy_prod" field.
	EnergyProd int64 `json:"energy_prod,omitempty"`
	// SolarProdLevel holds the value of the "solar_prod_level" field.
	SolarProdLevel int `json:"solar_prod_level,omitempty"`
	// RegionCode holds the value of the "region_code" field.
	RegionCode int `json:"region_code,omitempty"`
	// SystemCode holds the value of the "system_code" field.
	SystemCode int `json:"system_code,omitempty"`
	// OrbitCode holds the value of the "orbit_code" field.
	OrbitCode int `json:"orbit_code,omitempty"`
	// SuborbitCode holds the value of the "suborbit_code" field.
	SuborbitCode int `json:"suborbit_code,omitempty"`
	// PositionCode holds the value of the "position_code" field.
	PositionCode int `json:"position_code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PlanetType holds the value of the "planet_type" field.
	PlanetType int `json:"planet_type,omitempty"`
}

// FromRows scans the sql response data into Planet.
func (pl *Planet) FromRows(rows *sql.Rows) error {
	var scanpl struct {
		ID                     int
		CreatedAt              sql.NullTime
		UpdatedAt              sql.NullTime
		Metal                  sql.NullInt64
		MetalLastUpdate        sql.NullTime
		MetalRate              sql.NullInt64
		MetalProdLevel         sql.NullInt64
		MetalStorageLevel      sql.NullInt64
		Hydrogen               sql.NullInt64
		HydrogenLastUpdate     sql.NullTime
		HydrogenRate           sql.NullInt64
		HydrogenProdLevel      sql.NullInt64
		HydrogenStorageLevel   sql.NullInt64
		Silica                 sql.NullInt64
		SilicaLastUpdate       sql.NullTime
		SilicaRate             sql.NullInt64
		SilicaProdLevel        sql.NullInt64
		SilicaStorageLevel     sql.NullInt64
		Population             sql.NullInt64
		PopulationLastUpdate   sql.NullTime
		PopulationRate         sql.NullInt64
		PopulationProdLevel    sql.NullInt64
		PopulationStorageLevel sql.NullInt64
		EnergyCons             sql.NullInt64
		EnergyProd             sql.NullInt64
		SolarProdLevel         sql.NullInt64
		RegionCode             sql.NullInt64
		SystemCode             sql.NullInt64
		OrbitCode              sql.NullInt64
		SuborbitCode           sql.NullInt64
		PositionCode           sql.NullInt64
		Name                   sql.NullString
		PlanetType             sql.NullInt64
	}
	// the order here should be the same as in the `planet.Columns`.
	if err := rows.Scan(
		&scanpl.ID,
		&scanpl.CreatedAt,
		&scanpl.UpdatedAt,
		&scanpl.Metal,
		&scanpl.MetalLastUpdate,
		&scanpl.MetalRate,
		&scanpl.MetalProdLevel,
		&scanpl.MetalStorageLevel,
		&scanpl.Hydrogen,
		&scanpl.HydrogenLastUpdate,
		&scanpl.HydrogenRate,
		&scanpl.HydrogenProdLevel,
		&scanpl.HydrogenStorageLevel,
		&scanpl.Silica,
		&scanpl.SilicaLastUpdate,
		&scanpl.SilicaRate,
		&scanpl.SilicaProdLevel,
		&scanpl.SilicaStorageLevel,
		&scanpl.Population,
		&scanpl.PopulationLastUpdate,
		&scanpl.PopulationRate,
		&scanpl.PopulationProdLevel,
		&scanpl.PopulationStorageLevel,
		&scanpl.EnergyCons,
		&scanpl.EnergyProd,
		&scanpl.SolarProdLevel,
		&scanpl.RegionCode,
		&scanpl.SystemCode,
		&scanpl.OrbitCode,
		&scanpl.SuborbitCode,
		&scanpl.PositionCode,
		&scanpl.Name,
		&scanpl.PlanetType,
	); err != nil {
		return err
	}
	pl.ID = scanpl.ID
	pl.CreatedAt = scanpl.CreatedAt.Time
	pl.UpdatedAt = scanpl.UpdatedAt.Time
	pl.Metal = scanpl.Metal.Int64
	pl.MetalLastUpdate = scanpl.MetalLastUpdate.Time
	pl.MetalRate = int(scanpl.MetalRate.Int64)
	pl.MetalProdLevel = int(scanpl.MetalProdLevel.Int64)
	pl.MetalStorageLevel = int(scanpl.MetalStorageLevel.Int64)
	pl.Hydrogen = scanpl.Hydrogen.Int64
	pl.HydrogenLastUpdate = scanpl.HydrogenLastUpdate.Time
	pl.HydrogenRate = int(scanpl.HydrogenRate.Int64)
	pl.HydrogenProdLevel = int(scanpl.HydrogenProdLevel.Int64)
	pl.HydrogenStorageLevel = int(scanpl.HydrogenStorageLevel.Int64)
	pl.Silica = scanpl.Silica.Int64
	pl.SilicaLastUpdate = scanpl.SilicaLastUpdate.Time
	pl.SilicaRate = int(scanpl.SilicaRate.Int64)
	pl.SilicaProdLevel = int(scanpl.SilicaProdLevel.Int64)
	pl.SilicaStorageLevel = int(scanpl.SilicaStorageLevel.Int64)
	pl.Population = scanpl.Population.Int64
	pl.PopulationLastUpdate = scanpl.PopulationLastUpdate.Time
	pl.PopulationRate = int(scanpl.PopulationRate.Int64)
	pl.PopulationProdLevel = int(scanpl.PopulationProdLevel.Int64)
	pl.PopulationStorageLevel = int(scanpl.PopulationStorageLevel.Int64)
	pl.EnergyCons = scanpl.EnergyCons.Int64
	pl.EnergyProd = scanpl.EnergyProd.Int64
	pl.SolarProdLevel = int(scanpl.SolarProdLevel.Int64)
	pl.RegionCode = int(scanpl.RegionCode.Int64)
	pl.SystemCode = int(scanpl.SystemCode.Int64)
	pl.OrbitCode = int(scanpl.OrbitCode.Int64)
	pl.SuborbitCode = int(scanpl.SuborbitCode.Int64)
	pl.PositionCode = int(scanpl.PositionCode.Int64)
	pl.Name = scanpl.Name.String
	pl.PlanetType = int(scanpl.PlanetType.Int64)
	return nil
}

// QueryOwner queries the owner edge of the Planet.
func (pl *Planet) QueryOwner() *UserQuery {
	return (&PlanetClient{pl.config}).QueryOwner(pl)
}

// Update returns a builder for updating this Planet.
// Note that, you need to call Planet.Unwrap() before calling this method, if this Planet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Planet) Update() *PlanetUpdateOne {
	return (&PlanetClient{pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pl *Planet) Unwrap() *Planet {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Planet is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Planet) String() string {
	var builder strings.Builder
	builder.WriteString("Planet(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", metal=")
	builder.WriteString(fmt.Sprintf("%v", pl.Metal))
	builder.WriteString(", metal_last_update=")
	builder.WriteString(pl.MetalLastUpdate.Format(time.ANSIC))
	builder.WriteString(", metal_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalRate))
	builder.WriteString(", metal_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalProdLevel))
	builder.WriteString(", metal_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.MetalStorageLevel))
	builder.WriteString(", hydrogen=")
	builder.WriteString(fmt.Sprintf("%v", pl.Hydrogen))
	builder.WriteString(", hydrogen_last_update=")
	builder.WriteString(pl.HydrogenLastUpdate.Format(time.ANSIC))
	builder.WriteString(", hydrogen_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenRate))
	builder.WriteString(", hydrogen_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenProdLevel))
	builder.WriteString(", hydrogen_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.HydrogenStorageLevel))
	builder.WriteString(", silica=")
	builder.WriteString(fmt.Sprintf("%v", pl.Silica))
	builder.WriteString(", silica_last_update=")
	builder.WriteString(pl.SilicaLastUpdate.Format(time.ANSIC))
	builder.WriteString(", silica_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaRate))
	builder.WriteString(", silica_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaProdLevel))
	builder.WriteString(", silica_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SilicaStorageLevel))
	builder.WriteString(", population=")
	builder.WriteString(fmt.Sprintf("%v", pl.Population))
	builder.WriteString(", population_last_update=")
	builder.WriteString(pl.PopulationLastUpdate.Format(time.ANSIC))
	builder.WriteString(", population_rate=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationRate))
	builder.WriteString(", population_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationProdLevel))
	builder.WriteString(", population_storage_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.PopulationStorageLevel))
	builder.WriteString(", energy_cons=")
	builder.WriteString(fmt.Sprintf("%v", pl.EnergyCons))
	builder.WriteString(", energy_prod=")
	builder.WriteString(fmt.Sprintf("%v", pl.EnergyProd))
	builder.WriteString(", solar_prod_level=")
	builder.WriteString(fmt.Sprintf("%v", pl.SolarProdLevel))
	builder.WriteString(", region_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.RegionCode))
	builder.WriteString(", system_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.SystemCode))
	builder.WriteString(", orbit_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.OrbitCode))
	builder.WriteString(", suborbit_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.SuborbitCode))
	builder.WriteString(", position_code=")
	builder.WriteString(fmt.Sprintf("%v", pl.PositionCode))
	builder.WriteString(", name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", planet_type=")
	builder.WriteString(fmt.Sprintf("%v", pl.PlanetType))
	builder.WriteByte(')')
	return builder.String()
}

// Planets is a parsable slice of Planet.
type Planets []*Planet

// FromRows scans the sql response data into Planets.
func (pl *Planets) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scanpl := &Planet{}
		if err := scanpl.FromRows(rows); err != nil {
			return err
		}
		*pl = append(*pl, scanpl)
	}
	return nil
}

func (pl Planets) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
