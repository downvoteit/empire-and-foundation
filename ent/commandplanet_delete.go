// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/commandplanet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
)

// CommandPlanetDelete is the builder for deleting a CommandPlanet entity.
type CommandPlanetDelete struct {
	config
	predicates []predicate.CommandPlanet
}

// Where adds a new predicate to the delete builder.
func (cpd *CommandPlanetDelete) Where(ps ...predicate.CommandPlanet) *CommandPlanetDelete {
	cpd.predicates = append(cpd.predicates, ps...)
	return cpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cpd *CommandPlanetDelete) Exec(ctx context.Context) (int, error) {
	return cpd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (cpd *CommandPlanetDelete) ExecX(ctx context.Context) int {
	n, err := cpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cpd *CommandPlanetDelete) sqlExec(ctx context.Context) (int, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(cpd.driver.Dialect())
	)
	selector := builder.Select().From(sql.Table(commandplanet.Table))
	for _, p := range cpd.predicates {
		p(selector)
	}
	query, args := builder.Delete(commandplanet.Table).FromSelect(selector).Query()
	if err := cpd.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// CommandPlanetDeleteOne is the builder for deleting a single CommandPlanet entity.
type CommandPlanetDeleteOne struct {
	cpd *CommandPlanetDelete
}

// Exec executes the deletion query.
func (cpdo *CommandPlanetDeleteOne) Exec(ctx context.Context) error {
	n, err := cpdo.cpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{commandplanet.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cpdo *CommandPlanetDeleteOne) ExecX(ctx context.Context) {
	cpdo.cpd.ExecX(ctx)
}
