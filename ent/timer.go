// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
)

// Timer is the model entity for the Timer schema.
type Timer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action timer.Action `json:"action,omitempty"`
	// Group holds the value of the "group" field.
	Group timer.Group `json:"group,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimerQuery when eager-loading is set.
	Edges struct {
		// Planet holds the value of the planet edge.
		Planet *Planet
	} `json:"edges"`
	planet_id *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timer) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // action
		&sql.NullString{}, // group
		&sql.NullTime{},   // end_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Timer) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // planet_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timer fields.
func (t *Timer) assignValues(values ...interface{}) error {
	if m, n := len(values), len(timer.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field action", values[0])
	} else if value.Valid {
		t.Action = timer.Action(value.String)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field group", values[1])
	} else if value.Valid {
		t.Group = timer.Group(value.String)
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end_time", values[2])
	} else if value.Valid {
		t.EndTime = value.Time
	}
	values = values[3:]
	if len(values) == len(timer.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field planet_id", value)
		} else if value.Valid {
			t.planet_id = new(int)
			*t.planet_id = int(value.Int64)
		}
	}
	return nil
}

// QueryPlanet queries the planet edge of the Timer.
func (t *Timer) QueryPlanet() *PlanetQuery {
	return (&TimerClient{t.config}).QueryPlanet(t)
}

// Update returns a builder for updating this Timer.
// Note that, you need to call Timer.Unwrap() before calling this method, if this Timer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timer) Update() *TimerUpdateOne {
	return (&TimerClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Timer) Unwrap() *Timer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timer) String() string {
	var builder strings.Builder
	builder.WriteString("Timer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", action=")
	builder.WriteString(fmt.Sprintf("%v", t.Action))
	builder.WriteString(", group=")
	builder.WriteString(fmt.Sprintf("%v", t.Group))
	builder.WriteString(", end_time=")
	builder.WriteString(t.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Timers is a parsable slice of Timer.
type Timers []*Timer

func (t Timers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
