// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// PlanetCreate is the builder for creating a Planet entity.
type PlanetCreate struct {
	config
	created_at               *time.Time
	updated_at               *time.Time
	metal                    *int64
	metal_last_update        *time.Time
	metal_rate               *int
	metal_prod_level         *int
	metal_storage_level      *int
	hydrogen                 *int64
	hydrogen_last_update     *time.Time
	hydrogen_rate            *int
	hydrogen_prod_level      *int
	hydrogen_storage_level   *int
	silica                   *int64
	silica_last_update       *time.Time
	silica_rate              *int
	silica_prod_level        *int
	silica_storage_level     *int
	population               *int64
	population_last_update   *time.Time
	population_rate          *int
	population_prod_level    *int
	population_storage_level *int
	energy_cons              *int64
	energy_prod              *int64
	solar_prod_level         *int
	region_code              *int
	system_code              *int
	orbit_code               *int
	suborbit_code            *int
	position_code            *int
	name                     *string
	owner                    map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (pc *PlanetCreate) SetCreatedAt(t time.Time) *PlanetCreate {
	pc.created_at = &t
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableCreatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *PlanetCreate) SetUpdatedAt(t time.Time) *PlanetCreate {
	pc.updated_at = &t
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableUpdatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetMetal sets the metal field.
func (pc *PlanetCreate) SetMetal(i int64) *PlanetCreate {
	pc.metal = &i
	return pc
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetal(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetMetal(*i)
	}
	return pc
}

// SetMetalLastUpdate sets the metal_last_update field.
func (pc *PlanetCreate) SetMetalLastUpdate(t time.Time) *PlanetCreate {
	pc.metal_last_update = &t
	return pc
}

// SetNillableMetalLastUpdate sets the metal_last_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalLastUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetMetalLastUpdate(*t)
	}
	return pc
}

// SetMetalRate sets the metal_rate field.
func (pc *PlanetCreate) SetMetalRate(i int) *PlanetCreate {
	pc.metal_rate = &i
	return pc
}

// SetNillableMetalRate sets the metal_rate field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalRate(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalRate(*i)
	}
	return pc
}

// SetMetalProdLevel sets the metal_prod_level field.
func (pc *PlanetCreate) SetMetalProdLevel(i int) *PlanetCreate {
	pc.metal_prod_level = &i
	return pc
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalProdLevel(*i)
	}
	return pc
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (pc *PlanetCreate) SetMetalStorageLevel(i int) *PlanetCreate {
	pc.metal_storage_level = &i
	return pc
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalStorageLevel(*i)
	}
	return pc
}

// SetHydrogen sets the hydrogen field.
func (pc *PlanetCreate) SetHydrogen(i int64) *PlanetCreate {
	pc.hydrogen = &i
	return pc
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogen(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetHydrogen(*i)
	}
	return pc
}

// SetHydrogenLastUpdate sets the hydrogen_last_update field.
func (pc *PlanetCreate) SetHydrogenLastUpdate(t time.Time) *PlanetCreate {
	pc.hydrogen_last_update = &t
	return pc
}

// SetNillableHydrogenLastUpdate sets the hydrogen_last_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenLastUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetHydrogenLastUpdate(*t)
	}
	return pc
}

// SetHydrogenRate sets the hydrogen_rate field.
func (pc *PlanetCreate) SetHydrogenRate(i int) *PlanetCreate {
	pc.hydrogen_rate = &i
	return pc
}

// SetNillableHydrogenRate sets the hydrogen_rate field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenRate(i *int) *PlanetCreate {
	if i != nil {
		pc.SetHydrogenRate(*i)
	}
	return pc
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (pc *PlanetCreate) SetHydrogenProdLevel(i int) *PlanetCreate {
	pc.hydrogen_prod_level = &i
	return pc
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetHydrogenProdLevel(*i)
	}
	return pc
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (pc *PlanetCreate) SetHydrogenStorageLevel(i int) *PlanetCreate {
	pc.hydrogen_storage_level = &i
	return pc
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetHydrogenStorageLevel(*i)
	}
	return pc
}

// SetSilica sets the silica field.
func (pc *PlanetCreate) SetSilica(i int64) *PlanetCreate {
	pc.silica = &i
	return pc
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilica(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetSilica(*i)
	}
	return pc
}

// SetSilicaLastUpdate sets the silica_last_update field.
func (pc *PlanetCreate) SetSilicaLastUpdate(t time.Time) *PlanetCreate {
	pc.silica_last_update = &t
	return pc
}

// SetNillableSilicaLastUpdate sets the silica_last_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaLastUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetSilicaLastUpdate(*t)
	}
	return pc
}

// SetSilicaRate sets the silica_rate field.
func (pc *PlanetCreate) SetSilicaRate(i int) *PlanetCreate {
	pc.silica_rate = &i
	return pc
}

// SetNillableSilicaRate sets the silica_rate field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaRate(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSilicaRate(*i)
	}
	return pc
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (pc *PlanetCreate) SetSilicaProdLevel(i int) *PlanetCreate {
	pc.silica_prod_level = &i
	return pc
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSilicaProdLevel(*i)
	}
	return pc
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (pc *PlanetCreate) SetSilicaStorageLevel(i int) *PlanetCreate {
	pc.silica_storage_level = &i
	return pc
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSilicaStorageLevel(*i)
	}
	return pc
}

// SetPopulation sets the population field.
func (pc *PlanetCreate) SetPopulation(i int64) *PlanetCreate {
	pc.population = &i
	return pc
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulation(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetPopulation(*i)
	}
	return pc
}

// SetPopulationLastUpdate sets the population_last_update field.
func (pc *PlanetCreate) SetPopulationLastUpdate(t time.Time) *PlanetCreate {
	pc.population_last_update = &t
	return pc
}

// SetNillablePopulationLastUpdate sets the population_last_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationLastUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetPopulationLastUpdate(*t)
	}
	return pc
}

// SetPopulationRate sets the population_rate field.
func (pc *PlanetCreate) SetPopulationRate(i int) *PlanetCreate {
	pc.population_rate = &i
	return pc
}

// SetNillablePopulationRate sets the population_rate field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationRate(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulationRate(*i)
	}
	return pc
}

// SetPopulationProdLevel sets the population_prod_level field.
func (pc *PlanetCreate) SetPopulationProdLevel(i int) *PlanetCreate {
	pc.population_prod_level = &i
	return pc
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulationProdLevel(*i)
	}
	return pc
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (pc *PlanetCreate) SetPopulationStorageLevel(i int) *PlanetCreate {
	pc.population_storage_level = &i
	return pc
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulationStorageLevel(*i)
	}
	return pc
}

// SetEnergyCons sets the energy_cons field.
func (pc *PlanetCreate) SetEnergyCons(i int64) *PlanetCreate {
	pc.energy_cons = &i
	return pc
}

// SetNillableEnergyCons sets the energy_cons field if the given value is not nil.
func (pc *PlanetCreate) SetNillableEnergyCons(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetEnergyCons(*i)
	}
	return pc
}

// SetEnergyProd sets the energy_prod field.
func (pc *PlanetCreate) SetEnergyProd(i int64) *PlanetCreate {
	pc.energy_prod = &i
	return pc
}

// SetNillableEnergyProd sets the energy_prod field if the given value is not nil.
func (pc *PlanetCreate) SetNillableEnergyProd(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetEnergyProd(*i)
	}
	return pc
}

// SetSolarProdLevel sets the solar_prod_level field.
func (pc *PlanetCreate) SetSolarProdLevel(i int) *PlanetCreate {
	pc.solar_prod_level = &i
	return pc
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSolarProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSolarProdLevel(*i)
	}
	return pc
}

// SetRegionCode sets the region_code field.
func (pc *PlanetCreate) SetRegionCode(i int) *PlanetCreate {
	pc.region_code = &i
	return pc
}

// SetNillableRegionCode sets the region_code field if the given value is not nil.
func (pc *PlanetCreate) SetNillableRegionCode(i *int) *PlanetCreate {
	if i != nil {
		pc.SetRegionCode(*i)
	}
	return pc
}

// SetSystemCode sets the system_code field.
func (pc *PlanetCreate) SetSystemCode(i int) *PlanetCreate {
	pc.system_code = &i
	return pc
}

// SetNillableSystemCode sets the system_code field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSystemCode(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSystemCode(*i)
	}
	return pc
}

// SetOrbitCode sets the orbit_code field.
func (pc *PlanetCreate) SetOrbitCode(i int) *PlanetCreate {
	pc.orbit_code = &i
	return pc
}

// SetNillableOrbitCode sets the orbit_code field if the given value is not nil.
func (pc *PlanetCreate) SetNillableOrbitCode(i *int) *PlanetCreate {
	if i != nil {
		pc.SetOrbitCode(*i)
	}
	return pc
}

// SetSuborbitCode sets the suborbit_code field.
func (pc *PlanetCreate) SetSuborbitCode(i int) *PlanetCreate {
	pc.suborbit_code = &i
	return pc
}

// SetNillableSuborbitCode sets the suborbit_code field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSuborbitCode(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSuborbitCode(*i)
	}
	return pc
}

// SetPositionCode sets the position_code field.
func (pc *PlanetCreate) SetPositionCode(i int) *PlanetCreate {
	pc.position_code = &i
	return pc
}

// SetNillablePositionCode sets the position_code field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePositionCode(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPositionCode(*i)
	}
	return pc
}

// SetName sets the name field.
func (pc *PlanetCreate) SetName(s string) *PlanetCreate {
	pc.name = &s
	return pc
}

// SetNillableName sets the name field if the given value is not nil.
func (pc *PlanetCreate) SetNillableName(s *string) *PlanetCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetOwnerID sets the owner edge to User by id.
func (pc *PlanetCreate) SetOwnerID(id int) *PlanetCreate {
	if pc.owner == nil {
		pc.owner = make(map[int]struct{})
	}
	pc.owner[id] = struct{}{}
	return pc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pc *PlanetCreate) SetNillableOwnerID(id *int) *PlanetCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the owner edge to User.
func (pc *PlanetCreate) SetOwner(u *User) *PlanetCreate {
	return pc.SetOwnerID(u.ID)
}

// Save creates the Planet in the database.
func (pc *PlanetCreate) Save(ctx context.Context) (*Planet, error) {
	if pc.created_at == nil {
		v := planet.DefaultCreatedAt()
		pc.created_at = &v
	}
	if pc.updated_at == nil {
		v := planet.DefaultUpdatedAt()
		pc.updated_at = &v
	}
	if pc.metal == nil {
		v := planet.DefaultMetal
		pc.metal = &v
	}
	if err := planet.MetalValidator(*pc.metal); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
	}
	if pc.metal_last_update == nil {
		v := planet.DefaultMetalLastUpdate()
		pc.metal_last_update = &v
	}
	if pc.metal_rate == nil {
		v := planet.DefaultMetalRate
		pc.metal_rate = &v
	}
	if pc.metal_prod_level == nil {
		v := planet.DefaultMetalProdLevel
		pc.metal_prod_level = &v
	}
	if err := planet.MetalProdLevelValidator(*pc.metal_prod_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
	}
	if pc.metal_storage_level == nil {
		v := planet.DefaultMetalStorageLevel
		pc.metal_storage_level = &v
	}
	if err := planet.MetalStorageLevelValidator(*pc.metal_storage_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
	}
	if pc.hydrogen == nil {
		v := planet.DefaultHydrogen
		pc.hydrogen = &v
	}
	if err := planet.HydrogenValidator(*pc.hydrogen); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
	}
	if pc.hydrogen_last_update == nil {
		v := planet.DefaultHydrogenLastUpdate()
		pc.hydrogen_last_update = &v
	}
	if pc.hydrogen_rate == nil {
		v := planet.DefaultHydrogenRate
		pc.hydrogen_rate = &v
	}
	if pc.hydrogen_prod_level == nil {
		v := planet.DefaultHydrogenProdLevel
		pc.hydrogen_prod_level = &v
	}
	if err := planet.HydrogenProdLevelValidator(*pc.hydrogen_prod_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
	}
	if pc.hydrogen_storage_level == nil {
		v := planet.DefaultHydrogenStorageLevel
		pc.hydrogen_storage_level = &v
	}
	if err := planet.HydrogenStorageLevelValidator(*pc.hydrogen_storage_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
	}
	if pc.silica == nil {
		v := planet.DefaultSilica
		pc.silica = &v
	}
	if err := planet.SilicaValidator(*pc.silica); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
	}
	if pc.silica_last_update == nil {
		v := planet.DefaultSilicaLastUpdate()
		pc.silica_last_update = &v
	}
	if pc.silica_rate == nil {
		v := planet.DefaultSilicaRate
		pc.silica_rate = &v
	}
	if pc.silica_prod_level == nil {
		v := planet.DefaultSilicaProdLevel
		pc.silica_prod_level = &v
	}
	if err := planet.SilicaProdLevelValidator(*pc.silica_prod_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
	}
	if pc.silica_storage_level == nil {
		v := planet.DefaultSilicaStorageLevel
		pc.silica_storage_level = &v
	}
	if err := planet.SilicaStorageLevelValidator(*pc.silica_storage_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
	}
	if pc.population == nil {
		v := planet.DefaultPopulation
		pc.population = &v
	}
	if err := planet.PopulationValidator(*pc.population); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
	}
	if pc.population_last_update == nil {
		v := planet.DefaultPopulationLastUpdate()
		pc.population_last_update = &v
	}
	if pc.population_rate == nil {
		v := planet.DefaultPopulationRate
		pc.population_rate = &v
	}
	if pc.population_prod_level == nil {
		v := planet.DefaultPopulationProdLevel
		pc.population_prod_level = &v
	}
	if err := planet.PopulationProdLevelValidator(*pc.population_prod_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
	}
	if pc.population_storage_level == nil {
		v := planet.DefaultPopulationStorageLevel
		pc.population_storage_level = &v
	}
	if err := planet.PopulationStorageLevelValidator(*pc.population_storage_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
	}
	if pc.energy_cons == nil {
		v := planet.DefaultEnergyCons
		pc.energy_cons = &v
	}
	if err := planet.EnergyConsValidator(*pc.energy_cons); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"energy_cons\": %v", err)
	}
	if pc.energy_prod == nil {
		v := planet.DefaultEnergyProd
		pc.energy_prod = &v
	}
	if err := planet.EnergyProdValidator(*pc.energy_prod); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"energy_prod\": %v", err)
	}
	if pc.solar_prod_level == nil {
		v := planet.DefaultSolarProdLevel
		pc.solar_prod_level = &v
	}
	if err := planet.SolarProdLevelValidator(*pc.solar_prod_level); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
	}
	if pc.region_code == nil {
		v := planet.DefaultRegionCode
		pc.region_code = &v
	}
	if err := planet.RegionCodeValidator(*pc.region_code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"region_code\": %v", err)
	}
	if pc.system_code == nil {
		v := planet.DefaultSystemCode
		pc.system_code = &v
	}
	if err := planet.SystemCodeValidator(*pc.system_code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"system_code\": %v", err)
	}
	if pc.orbit_code == nil {
		v := planet.DefaultOrbitCode
		pc.orbit_code = &v
	}
	if err := planet.OrbitCodeValidator(*pc.orbit_code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"orbit_code\": %v", err)
	}
	if pc.suborbit_code == nil {
		v := planet.DefaultSuborbitCode
		pc.suborbit_code = &v
	}
	if err := planet.SuborbitCodeValidator(*pc.suborbit_code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"suborbit_code\": %v", err)
	}
	if pc.position_code == nil {
		v := planet.DefaultPositionCode
		pc.position_code = &v
	}
	if err := planet.PositionCodeValidator(*pc.position_code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"position_code\": %v", err)
	}
	if pc.name == nil {
		v := planet.DefaultName
		pc.name = &v
	}
	if len(pc.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanetCreate) SaveX(ctx context.Context) *Planet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PlanetCreate) sqlSave(ctx context.Context) (*Planet, error) {
	var (
		pl   = &Planet{config: pc.config}
		spec = &sqlgraph.CreateSpec{
			Table: planet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		}
	)
	if value := pc.created_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldCreatedAt,
		})
		pl.CreatedAt = *value
	}
	if value := pc.updated_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldUpdatedAt,
		})
		pl.UpdatedAt = *value
	}
	if value := pc.metal; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldMetal,
		})
		pl.Metal = *value
	}
	if value := pc.metal_last_update; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldMetalLastUpdate,
		})
		pl.MetalLastUpdate = *value
	}
	if value := pc.metal_rate; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalRate,
		})
		pl.MetalRate = *value
	}
	if value := pc.metal_prod_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalProdLevel,
		})
		pl.MetalProdLevel = *value
	}
	if value := pc.metal_storage_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalStorageLevel,
		})
		pl.MetalStorageLevel = *value
	}
	if value := pc.hydrogen; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldHydrogen,
		})
		pl.Hydrogen = *value
	}
	if value := pc.hydrogen_last_update; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldHydrogenLastUpdate,
		})
		pl.HydrogenLastUpdate = *value
	}
	if value := pc.hydrogen_rate; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenRate,
		})
		pl.HydrogenRate = *value
	}
	if value := pc.hydrogen_prod_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenProdLevel,
		})
		pl.HydrogenProdLevel = *value
	}
	if value := pc.hydrogen_storage_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenStorageLevel,
		})
		pl.HydrogenStorageLevel = *value
	}
	if value := pc.silica; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldSilica,
		})
		pl.Silica = *value
	}
	if value := pc.silica_last_update; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldSilicaLastUpdate,
		})
		pl.SilicaLastUpdate = *value
	}
	if value := pc.silica_rate; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaRate,
		})
		pl.SilicaRate = *value
	}
	if value := pc.silica_prod_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaProdLevel,
		})
		pl.SilicaProdLevel = *value
	}
	if value := pc.silica_storage_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaStorageLevel,
		})
		pl.SilicaStorageLevel = *value
	}
	if value := pc.population; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldPopulation,
		})
		pl.Population = *value
	}
	if value := pc.population_last_update; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldPopulationLastUpdate,
		})
		pl.PopulationLastUpdate = *value
	}
	if value := pc.population_rate; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationRate,
		})
		pl.PopulationRate = *value
	}
	if value := pc.population_prod_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationProdLevel,
		})
		pl.PopulationProdLevel = *value
	}
	if value := pc.population_storage_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationStorageLevel,
		})
		pl.PopulationStorageLevel = *value
	}
	if value := pc.energy_cons; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldEnergyCons,
		})
		pl.EnergyCons = *value
	}
	if value := pc.energy_prod; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldEnergyProd,
		})
		pl.EnergyProd = *value
	}
	if value := pc.solar_prod_level; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSolarProdLevel,
		})
		pl.SolarProdLevel = *value
	}
	if value := pc.region_code; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldRegionCode,
		})
		pl.RegionCode = *value
	}
	if value := pc.system_code; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSystemCode,
		})
		pl.SystemCode = *value
	}
	if value := pc.orbit_code; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldOrbitCode,
		})
		pl.OrbitCode = *value
	}
	if value := pc.suborbit_code; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSuborbitCode,
		})
		pl.SuborbitCode = *value
	}
	if value := pc.position_code; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPositionCode,
		})
		pl.PositionCode = *value
	}
	if value := pc.name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: planet.FieldName,
		})
		pl.Name = *value
	}
	if nodes := pc.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	pl.ID = int(id)
	return pl, nil
}
