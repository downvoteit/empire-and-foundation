// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/commandplanet"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
)

// CommandPlanetUpdate is the builder for updating CommandPlanet entities.
type CommandPlanetUpdate struct {
	config

	planet        map[int]struct{}
	clearedPlanet bool
	predicates    []predicate.CommandPlanet
}

// Where adds a new predicate for the builder.
func (cpu *CommandPlanetUpdate) Where(ps ...predicate.CommandPlanet) *CommandPlanetUpdate {
	cpu.predicates = append(cpu.predicates, ps...)
	return cpu
}

// SetPlanetID sets the planet edge to Planet by id.
func (cpu *CommandPlanetUpdate) SetPlanetID(id int) *CommandPlanetUpdate {
	if cpu.planet == nil {
		cpu.planet = make(map[int]struct{})
	}
	cpu.planet[id] = struct{}{}
	return cpu
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (cpu *CommandPlanetUpdate) SetNillablePlanetID(id *int) *CommandPlanetUpdate {
	if id != nil {
		cpu = cpu.SetPlanetID(*id)
	}
	return cpu
}

// SetPlanet sets the planet edge to Planet.
func (cpu *CommandPlanetUpdate) SetPlanet(p *Planet) *CommandPlanetUpdate {
	return cpu.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (cpu *CommandPlanetUpdate) ClearPlanet() *CommandPlanetUpdate {
	cpu.clearedPlanet = true
	return cpu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cpu *CommandPlanetUpdate) Save(ctx context.Context) (int, error) {
	if len(cpu.planet) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return cpu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CommandPlanetUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CommandPlanetUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CommandPlanetUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *CommandPlanetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(cpu.driver.Dialect())
		selector = builder.Select(commandplanet.FieldID).From(builder.Table(commandplanet.Table))
	)
	for _, p := range cpu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = cpu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := cpu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(commandplanet.Table)
	)
	updater = updater.Where(sql.InInts(commandplanet.FieldID, ids...))
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if cpu.clearedPlanet {
		query, args := builder.Update(commandplanet.PlanetTable).
			SetNull(commandplanet.PlanetColumn).
			Where(sql.InInts(planet.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(cpu.planet) > 0 {
		for eid := range cpu.planet {
			query, args := builder.Update(commandplanet.PlanetTable).
				Set(commandplanet.PlanetColumn, eid).
				Where(sql.InInts(commandplanet.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// CommandPlanetUpdateOne is the builder for updating a single CommandPlanet entity.
type CommandPlanetUpdateOne struct {
	config
	id int

	planet        map[int]struct{}
	clearedPlanet bool
}

// SetPlanetID sets the planet edge to Planet by id.
func (cpuo *CommandPlanetUpdateOne) SetPlanetID(id int) *CommandPlanetUpdateOne {
	if cpuo.planet == nil {
		cpuo.planet = make(map[int]struct{})
	}
	cpuo.planet[id] = struct{}{}
	return cpuo
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (cpuo *CommandPlanetUpdateOne) SetNillablePlanetID(id *int) *CommandPlanetUpdateOne {
	if id != nil {
		cpuo = cpuo.SetPlanetID(*id)
	}
	return cpuo
}

// SetPlanet sets the planet edge to Planet.
func (cpuo *CommandPlanetUpdateOne) SetPlanet(p *Planet) *CommandPlanetUpdateOne {
	return cpuo.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (cpuo *CommandPlanetUpdateOne) ClearPlanet() *CommandPlanetUpdateOne {
	cpuo.clearedPlanet = true
	return cpuo
}

// Save executes the query and returns the updated entity.
func (cpuo *CommandPlanetUpdateOne) Save(ctx context.Context) (*CommandPlanet, error) {
	if len(cpuo.planet) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return cpuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CommandPlanetUpdateOne) SaveX(ctx context.Context) *CommandPlanet {
	cp, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cp
}

// Exec executes the query on the entity.
func (cpuo *CommandPlanetUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CommandPlanetUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *CommandPlanetUpdateOne) sqlSave(ctx context.Context) (cp *CommandPlanet, err error) {
	var (
		builder  = sql.Dialect(cpuo.driver.Dialect())
		selector = builder.Select(commandplanet.Columns...).From(builder.Table(commandplanet.Table))
	)
	commandplanet.ID(cpuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = cpuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		cp = &CommandPlanet{config: cpuo.config}
		if err := cp.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into CommandPlanet: %v", err)
		}
		id = cp.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("CommandPlanet with id: %v", cpuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one CommandPlanet with the same id: %v", cpuo.id)
	}

	tx, err := cpuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(commandplanet.Table)
	)
	updater = updater.Where(sql.InInts(commandplanet.FieldID, ids...))
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if cpuo.clearedPlanet {
		query, args := builder.Update(commandplanet.PlanetTable).
			SetNull(commandplanet.PlanetColumn).
			Where(sql.InInts(planet.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(cpuo.planet) > 0 {
		for eid := range cpuo.planet {
			query, args := builder.Update(commandplanet.PlanetTable).
				Set(commandplanet.PlanetColumn, eid).
				Where(sql.InInts(commandplanet.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return cp, nil
}
