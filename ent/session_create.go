// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/session"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	token  *string
	data   *[]byte
	expiry *time.Time
}

// SetToken sets the token field.
func (sc *SessionCreate) SetToken(s string) *SessionCreate {
	sc.token = &s
	return sc
}

// SetData sets the data field.
func (sc *SessionCreate) SetData(b []byte) *SessionCreate {
	sc.data = &b
	return sc
}

// SetExpiry sets the expiry field.
func (sc *SessionCreate) SetExpiry(t time.Time) *SessionCreate {
	sc.expiry = &t
	return sc
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	if sc.token == nil {
		return nil, errors.New("ent: missing required field \"token\"")
	}
	if sc.data == nil {
		return nil, errors.New("ent: missing required field \"data\"")
	}
	if sc.expiry == nil {
		return nil, errors.New("ent: missing required field \"expiry\"")
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	var (
		s     = &Session{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: session.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		}
	)
	if value := sc.token; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: session.FieldToken,
		})
		s.Token = *value
	}
	if value := sc.data; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: session.FieldData,
		})
		s.Data = *value
	}
	if value := sc.expiry; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: session.FieldExpiry,
		})
		s.Expiry = *value
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
