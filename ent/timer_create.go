// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
)

// TimerCreate is the builder for creating a Timer entity.
type TimerCreate struct {
	config
	action   *timer.Action
	group    *timer.Group
	end_time *time.Time
	planet   map[int]struct{}
}

// SetAction sets the action field.
func (tc *TimerCreate) SetAction(t timer.Action) *TimerCreate {
	tc.action = &t
	return tc
}

// SetGroup sets the group field.
func (tc *TimerCreate) SetGroup(t timer.Group) *TimerCreate {
	tc.group = &t
	return tc
}

// SetEndTime sets the end_time field.
func (tc *TimerCreate) SetEndTime(t time.Time) *TimerCreate {
	tc.end_time = &t
	return tc
}

// SetPlanetID sets the planet edge to Planet by id.
func (tc *TimerCreate) SetPlanetID(id int) *TimerCreate {
	if tc.planet == nil {
		tc.planet = make(map[int]struct{})
	}
	tc.planet[id] = struct{}{}
	return tc
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (tc *TimerCreate) SetNillablePlanetID(id *int) *TimerCreate {
	if id != nil {
		tc = tc.SetPlanetID(*id)
	}
	return tc
}

// SetPlanet sets the planet edge to Planet.
func (tc *TimerCreate) SetPlanet(p *Planet) *TimerCreate {
	return tc.SetPlanetID(p.ID)
}

// Save creates the Timer in the database.
func (tc *TimerCreate) Save(ctx context.Context) (*Timer, error) {
	if tc.action == nil {
		return nil, errors.New("ent: missing required field \"action\"")
	}
	if err := timer.ActionValidator(*tc.action); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"action\": %v", err)
	}
	if tc.group == nil {
		return nil, errors.New("ent: missing required field \"group\"")
	}
	if err := timer.GroupValidator(*tc.group); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"group\": %v", err)
	}
	if tc.end_time == nil {
		return nil, errors.New("ent: missing required field \"end_time\"")
	}
	if len(tc.planet) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimerCreate) SaveX(ctx context.Context) *Timer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TimerCreate) sqlSave(ctx context.Context) (*Timer, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(tc.driver.Dialect())
		t       = &Timer{config: tc.config}
	)
	tx, err := tc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(timer.Table).Default()
	if value := tc.action; value != nil {
		insert.Set(timer.FieldAction, *value)
		t.Action = *value
	}
	if value := tc.group; value != nil {
		insert.Set(timer.FieldGroup, *value)
		t.Group = *value
	}
	if value := tc.end_time; value != nil {
		insert.Set(timer.FieldEndTime, *value)
		t.EndTime = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(timer.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	t.ID = int(id)
	if len(tc.planet) > 0 {
		for eid := range tc.planet {
			query, args := builder.Update(timer.PlanetTable).
				Set(timer.PlanetColumn, eid).
				Where(sql.EQ(timer.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
