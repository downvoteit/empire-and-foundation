// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/commandplanet"
)

// CommandPlanetCreate is the builder for creating a CommandPlanet entity.
type CommandPlanetCreate struct {
	config
	typ      *commandplanet.Typ
	group    *commandplanet.Group
	end_time *time.Time
	planet   map[int]struct{}
}

// SetTyp sets the typ field.
func (cpc *CommandPlanetCreate) SetTyp(c commandplanet.Typ) *CommandPlanetCreate {
	cpc.typ = &c
	return cpc
}

// SetGroup sets the group field.
func (cpc *CommandPlanetCreate) SetGroup(c commandplanet.Group) *CommandPlanetCreate {
	cpc.group = &c
	return cpc
}

// SetEndTime sets the end_time field.
func (cpc *CommandPlanetCreate) SetEndTime(t time.Time) *CommandPlanetCreate {
	cpc.end_time = &t
	return cpc
}

// SetPlanetID sets the planet edge to Planet by id.
func (cpc *CommandPlanetCreate) SetPlanetID(id int) *CommandPlanetCreate {
	if cpc.planet == nil {
		cpc.planet = make(map[int]struct{})
	}
	cpc.planet[id] = struct{}{}
	return cpc
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (cpc *CommandPlanetCreate) SetNillablePlanetID(id *int) *CommandPlanetCreate {
	if id != nil {
		cpc = cpc.SetPlanetID(*id)
	}
	return cpc
}

// SetPlanet sets the planet edge to Planet.
func (cpc *CommandPlanetCreate) SetPlanet(p *Planet) *CommandPlanetCreate {
	return cpc.SetPlanetID(p.ID)
}

// Save creates the CommandPlanet in the database.
func (cpc *CommandPlanetCreate) Save(ctx context.Context) (*CommandPlanet, error) {
	if cpc.typ == nil {
		return nil, errors.New("ent: missing required field \"typ\"")
	}
	if err := commandplanet.TypValidator(*cpc.typ); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"typ\": %v", err)
	}
	if cpc.group == nil {
		return nil, errors.New("ent: missing required field \"group\"")
	}
	if err := commandplanet.GroupValidator(*cpc.group); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"group\": %v", err)
	}
	if cpc.end_time == nil {
		return nil, errors.New("ent: missing required field \"end_time\"")
	}
	if len(cpc.planet) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return cpc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CommandPlanetCreate) SaveX(ctx context.Context) *CommandPlanet {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cpc *CommandPlanetCreate) sqlSave(ctx context.Context) (*CommandPlanet, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(cpc.driver.Dialect())
		cp      = &CommandPlanet{config: cpc.config}
	)
	tx, err := cpc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(commandplanet.Table).Default()
	if value := cpc.typ; value != nil {
		insert.Set(commandplanet.FieldTyp, *value)
		cp.Typ = *value
	}
	if value := cpc.group; value != nil {
		insert.Set(commandplanet.FieldGroup, *value)
		cp.Group = *value
	}
	if value := cpc.end_time; value != nil {
		insert.Set(commandplanet.FieldEndTime, *value)
		cp.EndTime = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(commandplanet.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	cp.ID = int(id)
	if len(cpc.planet) > 0 {
		for eid := range cpc.planet {
			query, args := builder.Update(commandplanet.PlanetTable).
				Set(commandplanet.PlanetColumn, eid).
				Where(sql.EQ(commandplanet.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return cp, nil
}
