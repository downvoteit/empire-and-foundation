// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
)

// TimerUpdate is the builder for updating Timer entities.
type TimerUpdate struct {
	config

	planet        map[int]struct{}
	clearedPlanet bool
	predicates    []predicate.Timer
}

// Where adds a new predicate for the builder.
func (tu *TimerUpdate) Where(ps ...predicate.Timer) *TimerUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetPlanetID sets the planet edge to Planet by id.
func (tu *TimerUpdate) SetPlanetID(id int) *TimerUpdate {
	if tu.planet == nil {
		tu.planet = make(map[int]struct{})
	}
	tu.planet[id] = struct{}{}
	return tu
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (tu *TimerUpdate) SetNillablePlanetID(id *int) *TimerUpdate {
	if id != nil {
		tu = tu.SetPlanetID(*id)
	}
	return tu
}

// SetPlanet sets the planet edge to Planet.
func (tu *TimerUpdate) SetPlanet(p *Planet) *TimerUpdate {
	return tu.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (tu *TimerUpdate) ClearPlanet() *TimerUpdate {
	tu.clearedPlanet = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TimerUpdate) Save(ctx context.Context) (int, error) {
	if len(tu.planet) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(tu.driver.Dialect())
		selector = builder.Select(timer.FieldID).From(builder.Table(timer.Table))
	)
	for _, p := range tu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := tu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(timer.Table)
	)
	updater = updater.Where(sql.InInts(timer.FieldID, ids...))
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if tu.clearedPlanet {
		query, args := builder.Update(timer.PlanetTable).
			SetNull(timer.PlanetColumn).
			Where(sql.InInts(planet.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.planet) > 0 {
		for eid := range tu.planet {
			query, args := builder.Update(timer.PlanetTable).
				Set(timer.PlanetColumn, eid).
				Where(sql.InInts(timer.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// TimerUpdateOne is the builder for updating a single Timer entity.
type TimerUpdateOne struct {
	config
	id int

	planet        map[int]struct{}
	clearedPlanet bool
}

// SetPlanetID sets the planet edge to Planet by id.
func (tuo *TimerUpdateOne) SetPlanetID(id int) *TimerUpdateOne {
	if tuo.planet == nil {
		tuo.planet = make(map[int]struct{})
	}
	tuo.planet[id] = struct{}{}
	return tuo
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillablePlanetID(id *int) *TimerUpdateOne {
	if id != nil {
		tuo = tuo.SetPlanetID(*id)
	}
	return tuo
}

// SetPlanet sets the planet edge to Planet.
func (tuo *TimerUpdateOne) SetPlanet(p *Planet) *TimerUpdateOne {
	return tuo.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (tuo *TimerUpdateOne) ClearPlanet() *TimerUpdateOne {
	tuo.clearedPlanet = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TimerUpdateOne) Save(ctx context.Context) (*Timer, error) {
	if len(tuo.planet) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimerUpdateOne) SaveX(ctx context.Context) *Timer {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TimerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimerUpdateOne) sqlSave(ctx context.Context) (t *Timer, err error) {
	var (
		builder  = sql.Dialect(tuo.driver.Dialect())
		selector = builder.Select(timer.Columns...).From(builder.Table(timer.Table))
	)
	timer.ID(tuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		t = &Timer{config: tuo.config}
		if err := t.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Timer: %v", err)
		}
		id = t.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Timer with id: %v", tuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Timer with the same id: %v", tuo.id)
	}

	tx, err := tuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(timer.Table)
	)
	updater = updater.Where(sql.InInts(timer.FieldID, ids...))
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if tuo.clearedPlanet {
		query, args := builder.Update(timer.PlanetTable).
			SetNull(timer.PlanetColumn).
			Where(sql.InInts(planet.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.planet) > 0 {
		for eid := range tuo.planet {
			query, args := builder.Update(timer.PlanetTable).
				Set(timer.PlanetColumn, eid).
				Where(sql.InInts(timer.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
