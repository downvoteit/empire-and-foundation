// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
)

// TimerUpdate is the builder for updating Timer entities.
type TimerUpdate struct {
	config

	planet        map[int]struct{}
	clearedPlanet bool
	predicates    []predicate.Timer
}

// Where adds a new predicate for the builder.
func (tu *TimerUpdate) Where(ps ...predicate.Timer) *TimerUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetPlanetID sets the planet edge to Planet by id.
func (tu *TimerUpdate) SetPlanetID(id int) *TimerUpdate {
	if tu.planet == nil {
		tu.planet = make(map[int]struct{})
	}
	tu.planet[id] = struct{}{}
	return tu
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (tu *TimerUpdate) SetNillablePlanetID(id *int) *TimerUpdate {
	if id != nil {
		tu = tu.SetPlanetID(*id)
	}
	return tu
}

// SetPlanet sets the planet edge to Planet.
func (tu *TimerUpdate) SetPlanet(p *Planet) *TimerUpdate {
	return tu.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (tu *TimerUpdate) ClearPlanet() *TimerUpdate {
	tu.clearedPlanet = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TimerUpdate) Save(ctx context.Context) (int, error) {
	if len(tu.planet) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timer.Table,
			Columns: timer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timer.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.clearedPlanet {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timer.PlanetTable,
			Columns: []string{timer.PlanetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.planet; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timer.PlanetTable,
			Columns: []string{timer.PlanetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TimerUpdateOne is the builder for updating a single Timer entity.
type TimerUpdateOne struct {
	config
	id int

	planet        map[int]struct{}
	clearedPlanet bool
}

// SetPlanetID sets the planet edge to Planet by id.
func (tuo *TimerUpdateOne) SetPlanetID(id int) *TimerUpdateOne {
	if tuo.planet == nil {
		tuo.planet = make(map[int]struct{})
	}
	tuo.planet[id] = struct{}{}
	return tuo
}

// SetNillablePlanetID sets the planet edge to Planet by id if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillablePlanetID(id *int) *TimerUpdateOne {
	if id != nil {
		tuo = tuo.SetPlanetID(*id)
	}
	return tuo
}

// SetPlanet sets the planet edge to Planet.
func (tuo *TimerUpdateOne) SetPlanet(p *Planet) *TimerUpdateOne {
	return tuo.SetPlanetID(p.ID)
}

// ClearPlanet clears the planet edge to Planet.
func (tuo *TimerUpdateOne) ClearPlanet() *TimerUpdateOne {
	tuo.clearedPlanet = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TimerUpdateOne) Save(ctx context.Context) (*Timer, error) {
	if len(tuo.planet) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"planet\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimerUpdateOne) SaveX(ctx context.Context) *Timer {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TimerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimerUpdateOne) sqlSave(ctx context.Context) (t *Timer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timer.Table,
			Columns: timer.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeInt,
				Column: timer.FieldID,
			},
		},
	}
	if tuo.clearedPlanet {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timer.PlanetTable,
			Columns: []string{timer.PlanetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.planet; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timer.PlanetTable,
			Columns: []string{timer.PlanetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: planet.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Timer{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
