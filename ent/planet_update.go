// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// PlanetUpdate is the builder for updating Planet entities.
type PlanetUpdate struct {
	config

	updated_at                  *time.Time
	metal                       *int64
	addmetal                    *int64
	metal_prod_level            *int
	addmetal_prod_level         *int
	metal_storage_level         *int
	addmetal_storage_level      *int
	hydrogen                    *int64
	addhydrogen                 *int64
	hydrogen_prod_level         *int
	addhydrogen_prod_level      *int
	hydrogen_storage_level      *int
	addhydrogen_storage_level   *int
	silica                      *int64
	addsilica                   *int64
	silica_prod_level           *int
	addsilica_prod_level        *int
	silica_storage_level        *int
	addsilica_storage_level     *int
	population                  *int64
	addpopulation               *int64
	population_prod_level       *int
	addpopulation_prod_level    *int
	population_storage_level    *int
	addpopulation_storage_level *int
	solar_prod_level            *int
	addsolar_prod_level         *int

	name *string

	planet_skin          *string
	last_resource_update *time.Time
	owner                map[int]struct{}
	timers               map[int]struct{}
	clearedOwner         bool
	removedTimers        map[int]struct{}
	predicates           []predicate.Planet
}

// Where adds a new predicate for the builder.
func (pu *PlanetUpdate) Where(ps ...predicate.Planet) *PlanetUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *PlanetUpdate) SetUpdatedAt(t time.Time) *PlanetUpdate {
	pu.updated_at = &t
	return pu
}

// SetMetal sets the metal field.
func (pu *PlanetUpdate) SetMetal(i int64) *PlanetUpdate {
	pu.metal = &i
	pu.addmetal = nil
	return pu
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetal(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetMetal(*i)
	}
	return pu
}

// AddMetal adds i to metal.
func (pu *PlanetUpdate) AddMetal(i int64) *PlanetUpdate {
	if pu.addmetal == nil {
		pu.addmetal = &i
	} else {
		*pu.addmetal += i
	}
	return pu
}

// SetMetalProdLevel sets the metal_prod_level field.
func (pu *PlanetUpdate) SetMetalProdLevel(i int) *PlanetUpdate {
	pu.metal_prod_level = &i
	pu.addmetal_prod_level = nil
	return pu
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetMetalProdLevel(*i)
	}
	return pu
}

// AddMetalProdLevel adds i to metal_prod_level.
func (pu *PlanetUpdate) AddMetalProdLevel(i int) *PlanetUpdate {
	if pu.addmetal_prod_level == nil {
		pu.addmetal_prod_level = &i
	} else {
		*pu.addmetal_prod_level += i
	}
	return pu
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (pu *PlanetUpdate) SetMetalStorageLevel(i int) *PlanetUpdate {
	pu.metal_storage_level = &i
	pu.addmetal_storage_level = nil
	return pu
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetMetalStorageLevel(*i)
	}
	return pu
}

// AddMetalStorageLevel adds i to metal_storage_level.
func (pu *PlanetUpdate) AddMetalStorageLevel(i int) *PlanetUpdate {
	if pu.addmetal_storage_level == nil {
		pu.addmetal_storage_level = &i
	} else {
		*pu.addmetal_storage_level += i
	}
	return pu
}

// SetHydrogen sets the hydrogen field.
func (pu *PlanetUpdate) SetHydrogen(i int64) *PlanetUpdate {
	pu.hydrogen = &i
	pu.addhydrogen = nil
	return pu
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogen(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogen(*i)
	}
	return pu
}

// AddHydrogen adds i to hydrogen.
func (pu *PlanetUpdate) AddHydrogen(i int64) *PlanetUpdate {
	if pu.addhydrogen == nil {
		pu.addhydrogen = &i
	} else {
		*pu.addhydrogen += i
	}
	return pu
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (pu *PlanetUpdate) SetHydrogenProdLevel(i int) *PlanetUpdate {
	pu.hydrogen_prod_level = &i
	pu.addhydrogen_prod_level = nil
	return pu
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogenProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogenProdLevel(*i)
	}
	return pu
}

// AddHydrogenProdLevel adds i to hydrogen_prod_level.
func (pu *PlanetUpdate) AddHydrogenProdLevel(i int) *PlanetUpdate {
	if pu.addhydrogen_prod_level == nil {
		pu.addhydrogen_prod_level = &i
	} else {
		*pu.addhydrogen_prod_level += i
	}
	return pu
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (pu *PlanetUpdate) SetHydrogenStorageLevel(i int) *PlanetUpdate {
	pu.hydrogen_storage_level = &i
	pu.addhydrogen_storage_level = nil
	return pu
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogenStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogenStorageLevel(*i)
	}
	return pu
}

// AddHydrogenStorageLevel adds i to hydrogen_storage_level.
func (pu *PlanetUpdate) AddHydrogenStorageLevel(i int) *PlanetUpdate {
	if pu.addhydrogen_storage_level == nil {
		pu.addhydrogen_storage_level = &i
	} else {
		*pu.addhydrogen_storage_level += i
	}
	return pu
}

// SetSilica sets the silica field.
func (pu *PlanetUpdate) SetSilica(i int64) *PlanetUpdate {
	pu.silica = &i
	pu.addsilica = nil
	return pu
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilica(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetSilica(*i)
	}
	return pu
}

// AddSilica adds i to silica.
func (pu *PlanetUpdate) AddSilica(i int64) *PlanetUpdate {
	if pu.addsilica == nil {
		pu.addsilica = &i
	} else {
		*pu.addsilica += i
	}
	return pu
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (pu *PlanetUpdate) SetSilicaProdLevel(i int) *PlanetUpdate {
	pu.silica_prod_level = &i
	pu.addsilica_prod_level = nil
	return pu
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilicaProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSilicaProdLevel(*i)
	}
	return pu
}

// AddSilicaProdLevel adds i to silica_prod_level.
func (pu *PlanetUpdate) AddSilicaProdLevel(i int) *PlanetUpdate {
	if pu.addsilica_prod_level == nil {
		pu.addsilica_prod_level = &i
	} else {
		*pu.addsilica_prod_level += i
	}
	return pu
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (pu *PlanetUpdate) SetSilicaStorageLevel(i int) *PlanetUpdate {
	pu.silica_storage_level = &i
	pu.addsilica_storage_level = nil
	return pu
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilicaStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSilicaStorageLevel(*i)
	}
	return pu
}

// AddSilicaStorageLevel adds i to silica_storage_level.
func (pu *PlanetUpdate) AddSilicaStorageLevel(i int) *PlanetUpdate {
	if pu.addsilica_storage_level == nil {
		pu.addsilica_storage_level = &i
	} else {
		*pu.addsilica_storage_level += i
	}
	return pu
}

// SetPopulation sets the population field.
func (pu *PlanetUpdate) SetPopulation(i int64) *PlanetUpdate {
	pu.population = &i
	pu.addpopulation = nil
	return pu
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulation(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetPopulation(*i)
	}
	return pu
}

// AddPopulation adds i to population.
func (pu *PlanetUpdate) AddPopulation(i int64) *PlanetUpdate {
	if pu.addpopulation == nil {
		pu.addpopulation = &i
	} else {
		*pu.addpopulation += i
	}
	return pu
}

// SetPopulationProdLevel sets the population_prod_level field.
func (pu *PlanetUpdate) SetPopulationProdLevel(i int) *PlanetUpdate {
	pu.population_prod_level = &i
	pu.addpopulation_prod_level = nil
	return pu
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulationProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetPopulationProdLevel(*i)
	}
	return pu
}

// AddPopulationProdLevel adds i to population_prod_level.
func (pu *PlanetUpdate) AddPopulationProdLevel(i int) *PlanetUpdate {
	if pu.addpopulation_prod_level == nil {
		pu.addpopulation_prod_level = &i
	} else {
		*pu.addpopulation_prod_level += i
	}
	return pu
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (pu *PlanetUpdate) SetPopulationStorageLevel(i int) *PlanetUpdate {
	pu.population_storage_level = &i
	pu.addpopulation_storage_level = nil
	return pu
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulationStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetPopulationStorageLevel(*i)
	}
	return pu
}

// AddPopulationStorageLevel adds i to population_storage_level.
func (pu *PlanetUpdate) AddPopulationStorageLevel(i int) *PlanetUpdate {
	if pu.addpopulation_storage_level == nil {
		pu.addpopulation_storage_level = &i
	} else {
		*pu.addpopulation_storage_level += i
	}
	return pu
}

// SetSolarProdLevel sets the solar_prod_level field.
func (pu *PlanetUpdate) SetSolarProdLevel(i int) *PlanetUpdate {
	pu.solar_prod_level = &i
	pu.addsolar_prod_level = nil
	return pu
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSolarProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSolarProdLevel(*i)
	}
	return pu
}

// AddSolarProdLevel adds i to solar_prod_level.
func (pu *PlanetUpdate) AddSolarProdLevel(i int) *PlanetUpdate {
	if pu.addsolar_prod_level == nil {
		pu.addsolar_prod_level = &i
	} else {
		*pu.addsolar_prod_level += i
	}
	return pu
}

// SetName sets the name field.
func (pu *PlanetUpdate) SetName(s string) *PlanetUpdate {
	pu.name = &s
	return pu
}

// SetNillableName sets the name field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableName(s *string) *PlanetUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetPlanetSkin sets the planet_skin field.
func (pu *PlanetUpdate) SetPlanetSkin(s string) *PlanetUpdate {
	pu.planet_skin = &s
	return pu
}

// SetLastResourceUpdate sets the last_resource_update field.
func (pu *PlanetUpdate) SetLastResourceUpdate(t time.Time) *PlanetUpdate {
	pu.last_resource_update = &t
	return pu
}

// SetNillableLastResourceUpdate sets the last_resource_update field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableLastResourceUpdate(t *time.Time) *PlanetUpdate {
	if t != nil {
		pu.SetLastResourceUpdate(*t)
	}
	return pu
}

// SetOwnerID sets the owner edge to User by id.
func (pu *PlanetUpdate) SetOwnerID(id int) *PlanetUpdate {
	if pu.owner == nil {
		pu.owner = make(map[int]struct{})
	}
	pu.owner[id] = struct{}{}
	return pu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pu *PlanetUpdate) SetNillableOwnerID(id *int) *PlanetUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the owner edge to User.
func (pu *PlanetUpdate) SetOwner(u *User) *PlanetUpdate {
	return pu.SetOwnerID(u.ID)
}

// AddTimerIDs adds the timers edge to Timer by ids.
func (pu *PlanetUpdate) AddTimerIDs(ids ...int) *PlanetUpdate {
	if pu.timers == nil {
		pu.timers = make(map[int]struct{})
	}
	for i := range ids {
		pu.timers[ids[i]] = struct{}{}
	}
	return pu
}

// AddTimers adds the timers edges to Timer.
func (pu *PlanetUpdate) AddTimers(t ...*Timer) *PlanetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTimerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (pu *PlanetUpdate) ClearOwner() *PlanetUpdate {
	pu.clearedOwner = true
	return pu
}

// RemoveTimerIDs removes the timers edge to Timer by ids.
func (pu *PlanetUpdate) RemoveTimerIDs(ids ...int) *PlanetUpdate {
	if pu.removedTimers == nil {
		pu.removedTimers = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedTimers[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveTimers removes timers edges to Timer.
func (pu *PlanetUpdate) RemoveTimers(t ...*Timer) *PlanetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTimerIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlanetUpdate) Save(ctx context.Context) (int, error) {
	if pu.updated_at == nil {
		v := planet.UpdateDefaultUpdatedAt()
		pu.updated_at = &v
	}
	if pu.metal != nil {
		if err := planet.MetalValidator(*pu.metal); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
		}
	}
	if pu.metal_prod_level != nil {
		if err := planet.MetalProdLevelValidator(*pu.metal_prod_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
		}
	}
	if pu.metal_storage_level != nil {
		if err := planet.MetalStorageLevelValidator(*pu.metal_storage_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
		}
	}
	if pu.hydrogen != nil {
		if err := planet.HydrogenValidator(*pu.hydrogen); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
		}
	}
	if pu.hydrogen_prod_level != nil {
		if err := planet.HydrogenProdLevelValidator(*pu.hydrogen_prod_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
		}
	}
	if pu.hydrogen_storage_level != nil {
		if err := planet.HydrogenStorageLevelValidator(*pu.hydrogen_storage_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
		}
	}
	if pu.silica != nil {
		if err := planet.SilicaValidator(*pu.silica); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
		}
	}
	if pu.silica_prod_level != nil {
		if err := planet.SilicaProdLevelValidator(*pu.silica_prod_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
		}
	}
	if pu.silica_storage_level != nil {
		if err := planet.SilicaStorageLevelValidator(*pu.silica_storage_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
		}
	}
	if pu.population != nil {
		if err := planet.PopulationValidator(*pu.population); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
		}
	}
	if pu.population_prod_level != nil {
		if err := planet.PopulationProdLevelValidator(*pu.population_prod_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
		}
	}
	if pu.population_storage_level != nil {
		if err := planet.PopulationStorageLevelValidator(*pu.population_storage_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
		}
	}
	if pu.solar_prod_level != nil {
		if err := planet.SolarProdLevelValidator(*pu.solar_prod_level); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
		}
	}
	if len(pu.owner) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldUpdatedAt,
		})
	}
	if value := pu.metal; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldMetal,
		})
	}
	if value := pu.addmetal; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldMetal,
		})
	}
	if value := pu.metal_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value := pu.addmetal_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value := pu.metal_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value := pu.addmetal_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value := pu.hydrogen; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldHydrogen,
		})
	}
	if value := pu.addhydrogen; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldHydrogen,
		})
	}
	if value := pu.hydrogen_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value := pu.addhydrogen_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value := pu.hydrogen_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value := pu.addhydrogen_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value := pu.silica; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldSilica,
		})
	}
	if value := pu.addsilica; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldSilica,
		})
	}
	if value := pu.silica_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value := pu.addsilica_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value := pu.silica_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value := pu.addsilica_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value := pu.population; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldPopulation,
		})
	}
	if value := pu.addpopulation; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldPopulation,
		})
	}
	if value := pu.population_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value := pu.addpopulation_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value := pu.population_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value := pu.addpopulation_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value := pu.solar_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value := pu.addsolar_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value := pu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: planet.FieldName,
		})
	}
	if value := pu.planet_skin; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: planet.FieldPlanetSkin,
		})
	}
	if value := pu.last_resource_update; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldLastResourceUpdate,
		})
	}
	if pu.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedTimers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.timers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlanetUpdateOne is the builder for updating a single Planet entity.
type PlanetUpdateOne struct {
	config
	id int

	updated_at                  *time.Time
	metal                       *int64
	addmetal                    *int64
	metal_prod_level            *int
	addmetal_prod_level         *int
	metal_storage_level         *int
	addmetal_storage_level      *int
	hydrogen                    *int64
	addhydrogen                 *int64
	hydrogen_prod_level         *int
	addhydrogen_prod_level      *int
	hydrogen_storage_level      *int
	addhydrogen_storage_level   *int
	silica                      *int64
	addsilica                   *int64
	silica_prod_level           *int
	addsilica_prod_level        *int
	silica_storage_level        *int
	addsilica_storage_level     *int
	population                  *int64
	addpopulation               *int64
	population_prod_level       *int
	addpopulation_prod_level    *int
	population_storage_level    *int
	addpopulation_storage_level *int
	solar_prod_level            *int
	addsolar_prod_level         *int

	name *string

	planet_skin          *string
	last_resource_update *time.Time
	owner                map[int]struct{}
	timers               map[int]struct{}
	clearedOwner         bool
	removedTimers        map[int]struct{}
}

// SetUpdatedAt sets the updated_at field.
func (puo *PlanetUpdateOne) SetUpdatedAt(t time.Time) *PlanetUpdateOne {
	puo.updated_at = &t
	return puo
}

// SetMetal sets the metal field.
func (puo *PlanetUpdateOne) SetMetal(i int64) *PlanetUpdateOne {
	puo.metal = &i
	puo.addmetal = nil
	return puo
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetal(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetal(*i)
	}
	return puo
}

// AddMetal adds i to metal.
func (puo *PlanetUpdateOne) AddMetal(i int64) *PlanetUpdateOne {
	if puo.addmetal == nil {
		puo.addmetal = &i
	} else {
		*puo.addmetal += i
	}
	return puo
}

// SetMetalProdLevel sets the metal_prod_level field.
func (puo *PlanetUpdateOne) SetMetalProdLevel(i int) *PlanetUpdateOne {
	puo.metal_prod_level = &i
	puo.addmetal_prod_level = nil
	return puo
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalProdLevel(*i)
	}
	return puo
}

// AddMetalProdLevel adds i to metal_prod_level.
func (puo *PlanetUpdateOne) AddMetalProdLevel(i int) *PlanetUpdateOne {
	if puo.addmetal_prod_level == nil {
		puo.addmetal_prod_level = &i
	} else {
		*puo.addmetal_prod_level += i
	}
	return puo
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (puo *PlanetUpdateOne) SetMetalStorageLevel(i int) *PlanetUpdateOne {
	puo.metal_storage_level = &i
	puo.addmetal_storage_level = nil
	return puo
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalStorageLevel(*i)
	}
	return puo
}

// AddMetalStorageLevel adds i to metal_storage_level.
func (puo *PlanetUpdateOne) AddMetalStorageLevel(i int) *PlanetUpdateOne {
	if puo.addmetal_storage_level == nil {
		puo.addmetal_storage_level = &i
	} else {
		*puo.addmetal_storage_level += i
	}
	return puo
}

// SetHydrogen sets the hydrogen field.
func (puo *PlanetUpdateOne) SetHydrogen(i int64) *PlanetUpdateOne {
	puo.hydrogen = &i
	puo.addhydrogen = nil
	return puo
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogen(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogen(*i)
	}
	return puo
}

// AddHydrogen adds i to hydrogen.
func (puo *PlanetUpdateOne) AddHydrogen(i int64) *PlanetUpdateOne {
	if puo.addhydrogen == nil {
		puo.addhydrogen = &i
	} else {
		*puo.addhydrogen += i
	}
	return puo
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (puo *PlanetUpdateOne) SetHydrogenProdLevel(i int) *PlanetUpdateOne {
	puo.hydrogen_prod_level = &i
	puo.addhydrogen_prod_level = nil
	return puo
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogenProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogenProdLevel(*i)
	}
	return puo
}

// AddHydrogenProdLevel adds i to hydrogen_prod_level.
func (puo *PlanetUpdateOne) AddHydrogenProdLevel(i int) *PlanetUpdateOne {
	if puo.addhydrogen_prod_level == nil {
		puo.addhydrogen_prod_level = &i
	} else {
		*puo.addhydrogen_prod_level += i
	}
	return puo
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (puo *PlanetUpdateOne) SetHydrogenStorageLevel(i int) *PlanetUpdateOne {
	puo.hydrogen_storage_level = &i
	puo.addhydrogen_storage_level = nil
	return puo
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogenStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogenStorageLevel(*i)
	}
	return puo
}

// AddHydrogenStorageLevel adds i to hydrogen_storage_level.
func (puo *PlanetUpdateOne) AddHydrogenStorageLevel(i int) *PlanetUpdateOne {
	if puo.addhydrogen_storage_level == nil {
		puo.addhydrogen_storage_level = &i
	} else {
		*puo.addhydrogen_storage_level += i
	}
	return puo
}

// SetSilica sets the silica field.
func (puo *PlanetUpdateOne) SetSilica(i int64) *PlanetUpdateOne {
	puo.silica = &i
	puo.addsilica = nil
	return puo
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilica(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilica(*i)
	}
	return puo
}

// AddSilica adds i to silica.
func (puo *PlanetUpdateOne) AddSilica(i int64) *PlanetUpdateOne {
	if puo.addsilica == nil {
		puo.addsilica = &i
	} else {
		*puo.addsilica += i
	}
	return puo
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (puo *PlanetUpdateOne) SetSilicaProdLevel(i int) *PlanetUpdateOne {
	puo.silica_prod_level = &i
	puo.addsilica_prod_level = nil
	return puo
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilicaProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilicaProdLevel(*i)
	}
	return puo
}

// AddSilicaProdLevel adds i to silica_prod_level.
func (puo *PlanetUpdateOne) AddSilicaProdLevel(i int) *PlanetUpdateOne {
	if puo.addsilica_prod_level == nil {
		puo.addsilica_prod_level = &i
	} else {
		*puo.addsilica_prod_level += i
	}
	return puo
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (puo *PlanetUpdateOne) SetSilicaStorageLevel(i int) *PlanetUpdateOne {
	puo.silica_storage_level = &i
	puo.addsilica_storage_level = nil
	return puo
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilicaStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilicaStorageLevel(*i)
	}
	return puo
}

// AddSilicaStorageLevel adds i to silica_storage_level.
func (puo *PlanetUpdateOne) AddSilicaStorageLevel(i int) *PlanetUpdateOne {
	if puo.addsilica_storage_level == nil {
		puo.addsilica_storage_level = &i
	} else {
		*puo.addsilica_storage_level += i
	}
	return puo
}

// SetPopulation sets the population field.
func (puo *PlanetUpdateOne) SetPopulation(i int64) *PlanetUpdateOne {
	puo.population = &i
	puo.addpopulation = nil
	return puo
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulation(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulation(*i)
	}
	return puo
}

// AddPopulation adds i to population.
func (puo *PlanetUpdateOne) AddPopulation(i int64) *PlanetUpdateOne {
	if puo.addpopulation == nil {
		puo.addpopulation = &i
	} else {
		*puo.addpopulation += i
	}
	return puo
}

// SetPopulationProdLevel sets the population_prod_level field.
func (puo *PlanetUpdateOne) SetPopulationProdLevel(i int) *PlanetUpdateOne {
	puo.population_prod_level = &i
	puo.addpopulation_prod_level = nil
	return puo
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulationProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulationProdLevel(*i)
	}
	return puo
}

// AddPopulationProdLevel adds i to population_prod_level.
func (puo *PlanetUpdateOne) AddPopulationProdLevel(i int) *PlanetUpdateOne {
	if puo.addpopulation_prod_level == nil {
		puo.addpopulation_prod_level = &i
	} else {
		*puo.addpopulation_prod_level += i
	}
	return puo
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (puo *PlanetUpdateOne) SetPopulationStorageLevel(i int) *PlanetUpdateOne {
	puo.population_storage_level = &i
	puo.addpopulation_storage_level = nil
	return puo
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulationStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulationStorageLevel(*i)
	}
	return puo
}

// AddPopulationStorageLevel adds i to population_storage_level.
func (puo *PlanetUpdateOne) AddPopulationStorageLevel(i int) *PlanetUpdateOne {
	if puo.addpopulation_storage_level == nil {
		puo.addpopulation_storage_level = &i
	} else {
		*puo.addpopulation_storage_level += i
	}
	return puo
}

// SetSolarProdLevel sets the solar_prod_level field.
func (puo *PlanetUpdateOne) SetSolarProdLevel(i int) *PlanetUpdateOne {
	puo.solar_prod_level = &i
	puo.addsolar_prod_level = nil
	return puo
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSolarProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSolarProdLevel(*i)
	}
	return puo
}

// AddSolarProdLevel adds i to solar_prod_level.
func (puo *PlanetUpdateOne) AddSolarProdLevel(i int) *PlanetUpdateOne {
	if puo.addsolar_prod_level == nil {
		puo.addsolar_prod_level = &i
	} else {
		*puo.addsolar_prod_level += i
	}
	return puo
}

// SetName sets the name field.
func (puo *PlanetUpdateOne) SetName(s string) *PlanetUpdateOne {
	puo.name = &s
	return puo
}

// SetNillableName sets the name field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableName(s *string) *PlanetUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetPlanetSkin sets the planet_skin field.
func (puo *PlanetUpdateOne) SetPlanetSkin(s string) *PlanetUpdateOne {
	puo.planet_skin = &s
	return puo
}

// SetLastResourceUpdate sets the last_resource_update field.
func (puo *PlanetUpdateOne) SetLastResourceUpdate(t time.Time) *PlanetUpdateOne {
	puo.last_resource_update = &t
	return puo
}

// SetNillableLastResourceUpdate sets the last_resource_update field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableLastResourceUpdate(t *time.Time) *PlanetUpdateOne {
	if t != nil {
		puo.SetLastResourceUpdate(*t)
	}
	return puo
}

// SetOwnerID sets the owner edge to User by id.
func (puo *PlanetUpdateOne) SetOwnerID(id int) *PlanetUpdateOne {
	if puo.owner == nil {
		puo.owner = make(map[int]struct{})
	}
	puo.owner[id] = struct{}{}
	return puo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableOwnerID(id *int) *PlanetUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the owner edge to User.
func (puo *PlanetUpdateOne) SetOwner(u *User) *PlanetUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// AddTimerIDs adds the timers edge to Timer by ids.
func (puo *PlanetUpdateOne) AddTimerIDs(ids ...int) *PlanetUpdateOne {
	if puo.timers == nil {
		puo.timers = make(map[int]struct{})
	}
	for i := range ids {
		puo.timers[ids[i]] = struct{}{}
	}
	return puo
}

// AddTimers adds the timers edges to Timer.
func (puo *PlanetUpdateOne) AddTimers(t ...*Timer) *PlanetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTimerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (puo *PlanetUpdateOne) ClearOwner() *PlanetUpdateOne {
	puo.clearedOwner = true
	return puo
}

// RemoveTimerIDs removes the timers edge to Timer by ids.
func (puo *PlanetUpdateOne) RemoveTimerIDs(ids ...int) *PlanetUpdateOne {
	if puo.removedTimers == nil {
		puo.removedTimers = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedTimers[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveTimers removes timers edges to Timer.
func (puo *PlanetUpdateOne) RemoveTimers(t ...*Timer) *PlanetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTimerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PlanetUpdateOne) Save(ctx context.Context) (*Planet, error) {
	if puo.updated_at == nil {
		v := planet.UpdateDefaultUpdatedAt()
		puo.updated_at = &v
	}
	if puo.metal != nil {
		if err := planet.MetalValidator(*puo.metal); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
		}
	}
	if puo.metal_prod_level != nil {
		if err := planet.MetalProdLevelValidator(*puo.metal_prod_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
		}
	}
	if puo.metal_storage_level != nil {
		if err := planet.MetalStorageLevelValidator(*puo.metal_storage_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
		}
	}
	if puo.hydrogen != nil {
		if err := planet.HydrogenValidator(*puo.hydrogen); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
		}
	}
	if puo.hydrogen_prod_level != nil {
		if err := planet.HydrogenProdLevelValidator(*puo.hydrogen_prod_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
		}
	}
	if puo.hydrogen_storage_level != nil {
		if err := planet.HydrogenStorageLevelValidator(*puo.hydrogen_storage_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
		}
	}
	if puo.silica != nil {
		if err := planet.SilicaValidator(*puo.silica); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
		}
	}
	if puo.silica_prod_level != nil {
		if err := planet.SilicaProdLevelValidator(*puo.silica_prod_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
		}
	}
	if puo.silica_storage_level != nil {
		if err := planet.SilicaStorageLevelValidator(*puo.silica_storage_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
		}
	}
	if puo.population != nil {
		if err := planet.PopulationValidator(*puo.population); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
		}
	}
	if puo.population_prod_level != nil {
		if err := planet.PopulationProdLevelValidator(*puo.population_prod_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
		}
	}
	if puo.population_storage_level != nil {
		if err := planet.PopulationStorageLevelValidator(*puo.population_storage_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
		}
	}
	if puo.solar_prod_level != nil {
		if err := planet.SolarProdLevelValidator(*puo.solar_prod_level); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
		}
	}
	if len(puo.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanetUpdateOne) SaveX(ctx context.Context) *Planet {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlanetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanetUpdateOne) sqlSave(ctx context.Context) (pl *Planet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	if value := puo.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldUpdatedAt,
		})
	}
	if value := puo.metal; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldMetal,
		})
	}
	if value := puo.addmetal; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldMetal,
		})
	}
	if value := puo.metal_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value := puo.addmetal_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value := puo.metal_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value := puo.addmetal_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value := puo.hydrogen; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldHydrogen,
		})
	}
	if value := puo.addhydrogen; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldHydrogen,
		})
	}
	if value := puo.hydrogen_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value := puo.addhydrogen_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value := puo.hydrogen_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value := puo.addhydrogen_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value := puo.silica; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldSilica,
		})
	}
	if value := puo.addsilica; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldSilica,
		})
	}
	if value := puo.silica_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value := puo.addsilica_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value := puo.silica_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value := puo.addsilica_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value := puo.population; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldPopulation,
		})
	}
	if value := puo.addpopulation; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: planet.FieldPopulation,
		})
	}
	if value := puo.population_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value := puo.addpopulation_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value := puo.population_storage_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value := puo.addpopulation_storage_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value := puo.solar_prod_level; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value := puo.addsolar_prod_level; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value := puo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: planet.FieldName,
		})
	}
	if value := puo.planet_skin; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: planet.FieldPlanetSkin,
		})
	}
	if value := puo.last_resource_update; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: planet.FieldLastResourceUpdate,
		})
	}
	if puo.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedTimers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.timers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Planet{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
