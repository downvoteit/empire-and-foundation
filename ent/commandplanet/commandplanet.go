// Code generated by entc, DO NOT EDIT.

package commandplanet

import (
	"fmt"
)

const (
	// Label holds the string label denoting the commandplanet type in the database.
	Label = "command_planet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTyp holds the string denoting the typ vertex property in the database.
	FieldTyp = "typ"
	// FieldGroup holds the string denoting the group vertex property in the database.
	FieldGroup = "group"
	// FieldEndTime holds the string denoting the end_time vertex property in the database.
	FieldEndTime = "end_time"

	// Table holds the table name of the commandplanet in the database.
	Table = "command_planets"
	// PlanetTable is the table the holds the planet relation/edge.
	PlanetTable = "command_planets"
	// PlanetInverseTable is the table name for the Planet entity.
	// It exists in this package in order to avoid circular dependency with the "planet" package.
	PlanetInverseTable = "planets"
	// PlanetColumn is the table column denoting the planet relation/edge.
	PlanetColumn = "planet_id"
)

// Columns holds all SQL columns are commandplanet fields.
var Columns = []string{
	FieldID,
	FieldTyp,
	FieldGroup,
	FieldEndTime,
}

// Typ defines the type for the typ enum field.
type Typ string

const (
	TypUpgradeMetalMine Typ = "upgrade_metal_mine"
)

func (s Typ) String() string {
	return string(s)
}

// TypValidator is a validator for the "typ" field enum values. It is called by the builders before save.
func TypValidator(typ Typ) error {
	switch typ {
	case TypUpgradeMetalMine:
		return nil
	default:
		return fmt.Errorf("commandplanet: invalid enum value for typ field: %q", typ)
	}
}

// Group defines the type for the group enum field.
type Group string

const (
	GroupBuilding Group = "building"
)

func (s Group) String() string {
	return string(s)
}

// GroupValidator is a validator for the "group" field enum values. It is called by the builders before save.
func GroupValidator(group Group) error {
	switch group {
	case GroupBuilding:
		return nil
	default:
		return fmt.Errorf("commandplanet: invalid enum value for group field: %q", group)
	}
}
