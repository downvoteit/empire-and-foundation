// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/pdeguing/empire-and-foundation/ent/migrate"

	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/session"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
	"github.com/pdeguing/empire-and-foundation/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Planet is the client for interacting with the Planet builders.
	Planet *PlanetClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Timer is the client for interacting with the Timer builders.
	Timer *TimerClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Planet = NewPlanetClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Timer = NewTimerClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:  cfg,
		Planet:  NewPlanetClient(cfg),
		Session: NewSessionClient(cfg),
		Timer:   NewTimerClient(cfg),
		User:    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Planet.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Planet.Use(hooks...)
	c.Session.Use(hooks...)
	c.Timer.Use(hooks...)
	c.User.Use(hooks...)
}

// PlanetClient is a client for the Planet schema.
type PlanetClient struct {
	config
}

// NewPlanetClient returns a client for the Planet from the given config.
func NewPlanetClient(c config) *PlanetClient {
	return &PlanetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planet.Hooks(f(g(h())))`.
func (c *PlanetClient) Use(hooks ...Hook) {
	c.hooks.Planet = append(c.hooks.Planet, hooks...)
}

// Create returns a create builder for Planet.
func (c *PlanetClient) Create() *PlanetCreate {
	mutation := newPlanetMutation(c.config, OpCreate)
	return &PlanetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Planet.
func (c *PlanetClient) Update() *PlanetUpdate {
	mutation := newPlanetMutation(c.config, OpUpdate)
	return &PlanetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanetClient) UpdateOne(pl *Planet) *PlanetUpdateOne {
	return c.UpdateOneID(pl.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanetClient) UpdateOneID(id int) *PlanetUpdateOne {
	mutation := newPlanetMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &PlanetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Planet.
func (c *PlanetClient) Delete() *PlanetDelete {
	mutation := newPlanetMutation(c.config, OpDelete)
	return &PlanetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlanetClient) DeleteOne(pl *Planet) *PlanetDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlanetClient) DeleteOneID(id int) *PlanetDeleteOne {
	builder := c.Delete().Where(planet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanetDeleteOne{builder}
}

// Create returns a query builder for Planet.
func (c *PlanetClient) Query() *PlanetQuery {
	return &PlanetQuery{config: c.config}
}

// Get returns a Planet entity by its id.
func (c *PlanetClient) Get(ctx context.Context, id int) (*Planet, error) {
	return c.Query().Where(planet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanetClient) GetX(ctx context.Context, id int) *Planet {
	pl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pl
}

// QueryOwner queries the owner edge of a Planet.
func (c *PlanetClient) QueryOwner(pl *Planet) *UserQuery {
	query := &UserQuery{config: c.config}
	id := pl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(planet.Table, planet.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, planet.OwnerTable, planet.OwnerColumn),
	)
	query.sql = sqlgraph.Neighbors(pl.driver.Dialect(), step)

	return query
}

// QueryTimers queries the timers edge of a Planet.
func (c *PlanetClient) QueryTimers(pl *Planet) *TimerQuery {
	query := &TimerQuery{config: c.config}
	id := pl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(planet.Table, planet.FieldID, id),
		sqlgraph.To(timer.Table, timer.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, planet.TimersTable, planet.TimersColumn),
	)
	query.sql = sqlgraph.Neighbors(pl.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *PlanetClient) Hooks() []Hook {
	return c.hooks.Planet
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Create returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{config: c.config}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// TimerClient is a client for the Timer schema.
type TimerClient struct {
	config
}

// NewTimerClient returns a client for the Timer from the given config.
func NewTimerClient(c config) *TimerClient {
	return &TimerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `timer.Hooks(f(g(h())))`.
func (c *TimerClient) Use(hooks ...Hook) {
	c.hooks.Timer = append(c.hooks.Timer, hooks...)
}

// Create returns a create builder for Timer.
func (c *TimerClient) Create() *TimerCreate {
	mutation := newTimerMutation(c.config, OpCreate)
	return &TimerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Timer.
func (c *TimerClient) Update() *TimerUpdate {
	mutation := newTimerMutation(c.config, OpUpdate)
	return &TimerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimerClient) UpdateOne(t *Timer) *TimerUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TimerClient) UpdateOneID(id int) *TimerUpdateOne {
	mutation := newTimerMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &TimerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Timer.
func (c *TimerClient) Delete() *TimerDelete {
	mutation := newTimerMutation(c.config, OpDelete)
	return &TimerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TimerClient) DeleteOne(t *Timer) *TimerDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TimerClient) DeleteOneID(id int) *TimerDeleteOne {
	builder := c.Delete().Where(timer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimerDeleteOne{builder}
}

// Create returns a query builder for Timer.
func (c *TimerClient) Query() *TimerQuery {
	return &TimerQuery{config: c.config}
}

// Get returns a Timer entity by its id.
func (c *TimerClient) Get(ctx context.Context, id int) (*Timer, error) {
	return c.Query().Where(timer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimerClient) GetX(ctx context.Context, id int) *Timer {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryPlanet queries the planet edge of a Timer.
func (c *TimerClient) QueryPlanet(t *Timer) *PlanetQuery {
	query := &PlanetQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(timer.Table, timer.FieldID, id),
		sqlgraph.To(planet.Table, planet.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, timer.PlanetTable, timer.PlanetColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *TimerClient) Hooks() []Hook {
	return c.hooks.Timer
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryPlanets queries the planets edge of a User.
func (c *UserClient) QueryPlanets(u *User) *PlanetQuery {
	query := &PlanetQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(planet.Table, planet.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, user.PlanetsTable, user.PlanetsColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
